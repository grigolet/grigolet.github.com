[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "G.R.'s Blog",
    "section": "",
    "text": "Sometimes you need to make your matplotlib plots look like they were generated by other libraries\n\n\n\n\npython\n\n\nmatplotlib\n\n\nplot\n\n\nvisualization\n\n\nstyle\n\n\n \n\n\n\n\nSep 18, 2022\n\n\n8 min\n\n\n\n\n\n\n  \n\n\n\n\n\nBecause sometimes right y axes are not enough\n\n\n\n\npython\n\n\nmatplotlib\n\n\nplot\n\n\nvisualization\n\n\n \n\n\n\n\nSep 8, 2022\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOr how I fell in love with Quarto\n\n\n\n\njupyter\n\n\nnotebook\n\n\npython\n\n\nquarto\n\n\n \n\n\n\n\nSep 7, 2022\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/plots-with-multiple-y-axes/index.html",
    "href": "posts/plots-with-multiple-y-axes/index.html",
    "title": "Multiple Y axes with matplotlib",
    "section": "",
    "text": "The problem of visualizing many series\nAssuming we have a very simple set of \\((x, y_n)\\) series a simple plot with matplotlib may look like this:\n\nimport matplotlib.pyplot as plt\nimport random as rnd\n\nx = range(100)\ny1 = [rnd.random() for i in x]\ny2 = [rnd.random() * 10 for i in x]\ny3 = [rnd.random() * 20 + 10 for i in x]\ny4 = [rnd.random() * 100 + 50 for i in x]\n\nfig, ax = plt.subplots()\nfor y in [y1, y2, y3, y4]:\n    ax.plot(x, y, '.-')\n\n\n\n\nFigure 1: A matplotlib plot with four series plotted together.\n\n\n\n\nNote that in Figure Figure 1 each time series has a different standard deviation, thus different ranges may be needed. This is often easily accomplished by plotting each series in a different subplots. However, subplots make it more difficult to visually compare and align series, especially when time-based. For example, see subplots here:\n\nx = range(100)\ny1 = [rnd.random() if i < 30 else rnd.random() + 1 for i in x]\ny2 = [rnd.random() * 10 if i < 33 else rnd.random() * 10 + 10 for i in x]\ny3 = [rnd.random() * 20 + 10 if i < 30 else rnd.random() * 20 + 30 for i in x]\ny4 = [rnd.random() * 100 + 50 if i < 27 else rnd.random() * 100 + 180 for i in x]\n\nfig, ax = plt.subplots()\nfor y in [y1, y2, y3, y4]:\n    ax.plot(x, y, '.-')\n\n\n\n\nMultiple series with an offset at arbitrary x.\n\n\n\n\nHere I have added an offset to each series. Two series, y1 and y3 have a change point at the same index, while the other two have a change point at slightly different xs. We could plot each series in a subplots, perhaps vertically stacked:\n\nseries = [y1, y2, y3, y4]\nfig, axs = plt.subplots(len(series), 1, figsize=(6, 4*len(series)))\nfor ix, y in enumerate(series):\n    ax = axs.flat[ix]\n    ax.plot(x, y, '.-')\n    ax.set_title(f'y{ix+1}')\n\n\n\n\nFigure 2: Series plotted on different subplots.\n\n\n\n\nIn figure Figure 2 you can see that each series as an offset when adding a proper range on the y axis. However, it is still a bit difficult to understand the real indexes of the offset. I would like to understand which come first and which comes later.\n\n\nAdding multiple Y axes to matplotlib plots\nWe can starting adding multiple axes by taking inspiration from the Matplotib documentation using spines, Parasite Axes and another Parasite axis demo.\nThe idea is to use ax.twinx() to create an additional axes. As the documentation says, > Create a new Axes with an invisible x-axis and an independent y-axis positioned opposite to the original one (i.e. at right).\nAlthough twinx() is used to create a secondary axis on the right position I could use it to create a secondary axis and leave the spines of the axis only on the left. I can use set_position() on the spines object to shift the spines on left:\n\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax3 = ax1.twinx()\nax4 = ax1.twinx()\naxs = [ax1, ax2, ax3, ax4]\n\nfor ix, (ax, y) in enumerate(zip(axs, series)):\n    ax.plot(x, y, label=f'y{ix}', color=f'C{ix}')\nax.legend();\n\n\n\n\nFigure 3: Single plot with multiple series and secondary axes.\n\n\n\n\nAs you can see in Figure Figure 3 we can understand the index at which each change point of the series is happening. The only issue is that the y axes on the right are overlapping between each other.\nMy goal is to have these secondary y-axes on the left for easier reading. Actually, if you inspect the source of how twinx() is defined, it calls Axes._make_twin_axes() and sets later the tick position on the right using YAxis.tick_right() and YAxis.set_label_position('right'). It would be nice if twinx() would not assume that we want the axes to the right and instead allowed to pass a parameter which decised the position.\nHere below I leave a minimum working example I could think of:\n\nfig, axes = plt.subplots()\nfor ix, y in enumerate(series):\n    # If we have to plot the first series we use \n    # The axes created by plt.subplots() earlier\n    if ix == 0: \n        ax = axes\n    else:\n        # It's not the first series: we need to\n        # create a twin axes\n        ax = axes.twinx()\n    # Set the ticks of the axis to the left\n    ax.yaxis.tick_left()\n    # Set the labels of the axes to the lef\n    ax.yaxis.set_label_position('left')\n    ax.yaxis.set_offset_position('left')\n    # Offset the position of he ticks and labels\n    # by some % of the axes avoid overlapping of axes\n    ax.spines['left'].set_position(('outward', 40 * ix))\n    # Plot the actual data\n    ax.plot(x, y, color=f'C{ix}')\n    ax.spines['left'].set_color(f'C{ix}')\n    ax.tick_params(axis='y', colors=f'C{ix}')\n\n\n\n\nEt voilà, here I have a plot similar to the WinCC-OA one. I could improve the plot a bit by using the same number of ticks for each axes. I would do this using the LinearLocator class:\n\n\nCode\nimport matplotlib.ticker as mt\n\nfig, axes = plt.subplots()\nfor ix, y in enumerate(series):\n    # If we have to plot the first series we use \n    # The axes created by plt.subplots() earlier\n    if ix == 0: \n        ax = axes\n    else:\n        # It's not the first series: we need to\n        # create a twin axes\n        ax = axes.twinx()\n    # Set the ticks of the axis to the left\n    ax.yaxis.tick_left()\n    # Set the labels of the axes to the left\n    ax.yaxis.set_label_position('left')\n    ax.yaxis.set_offset_position('left')\n    # Offset the position of he ticks and labels\n    # by some % of the axes avoid overlapping of axes\n    ax.spines['left'].set_position(('outward', 40 * ix))\n    # Plot the actual data\n    ax.plot(x, y, color=f'C{ix}')\n    # Set the colors of the ticks, labels and spines to be\n    # the same of the associated series\n    ax.spines['left'].set_color(f'C{ix}')\n    ax.tick_params(axis='y', colors=f'C{ix}')\n    # Use a tick locator to have the same number of ticks\n    ax.yaxis.set_major_locator(mt.LinearLocator(11))\n    # And format the labels to have only one digit after the decimals\n    ax.yaxis.set_major_formatter(mt.StrMethodFormatter('{x:.1f}'))\n\n\n\n\n\n\n\nConclusions\nI find very useful for myself to provide a minimal example of having a plot with multiple axes, though a final plot may require more subtle adjustements. Keypoints to have multiple y axes:\n\nUse twinx() to create an additional axis\nSet ticks, labels and offest positions to the right: ax.yaxis.tick_left(), ax.yaxis.set_label_position('left'), ax.yaxis.set_offset_position('left')\nAdjust the offset of the spines to the left using points, percentage or data coordinate. In the case of points: ax.spines['left'].set_position()\nChange spines, tick and label colors to the same of the series for better readability: ax.spines['left'].set_color(color), ax.tick_params(axis='y', colors=color)\nOptionally adjust the number of ticks to be the same for all the axes: use a LinearLocator class with a fixed number of points"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html",
    "href": "posts/my-matplotlib-stylesheet/index.html",
    "title": "My matplotlib stylesheet",
    "section": "",
    "text": "When working on R&D of gasesous detectors I tend to produce lots of plots for internal group discussions, conference presentations and publication publishing. Since most of these plots shows performance relative to gaseous detectors and since I am based at CERN I get to see lot of similar plots made by some other groups using ROOT, the de-facto standard analysis tool for high energy physics.\nIf I really have to be honest I have never liked ROOT so much, although I understand it provides several useful tools, from plotting data and fitting functions to GUI toolkits. Most, if not all the plots regarding the discovery of the Higgs boson were produced using ROOT. The layout of ROOT plots is then recognized and approved by the majority of the community in high energy physics.\nIf we have to compare a default plot made using root versus a default plot made with matplotlib, this would be the result\n\n\nCode\nimport matplotlib.pyplot as plt\nimport ROOT as rt\nimport numpy as np\n\nx = np.array([321.0, 860.0, 777.0, 562.0, 374.0, 132.0, 816.0, 220.0, 253.0])\ny = np.array([134.0,307.0,299.0,213.0,135.0,50.0,297.0,85.0,95.0])\n\n# Let's just make sure we are using the default settings now\nplt.style.use('default')\n\n# Matplotlib\nfig, ax = plt.subplots()\nax.set(title='Rate vs. Currents', xlabel='Rate [Hz/cm$^2$]', ylabel='Currents [uA]')\nax.plot(x, y, '.')\nax.axhline(150, color='r')\n\n# ROOT\ncanvas = rt.TCanvas(\"rate_vs_current\", \"Rate vs. Currents\")\ngraph = rt.TGraph(len(x), x, y)\ngraph.SetTitle(\"Rate vs. Currents\")\ngraph.SetMarkerStyle(7)\ngraph.GetXaxis().SetTitle(\"Rate [Hz/cm^{2}]\")\ngraph.GetYaxis().SetTitle(\"Currents [uA]\")\nline = rt.TLine(graph.GetXaxis().GetXmin(), 150, graph.GetXaxis().GetXmax(), 150)\nline.SetLineColor(rt.kRed)\ngraph.Draw('AP')\nline.Draw(\"L\")\ncanvas.Draw()\n\n\n\n\n\n\n\nFigure 1: Default matplotlib plot\n\n\n\n\n\n\n\nFigure 2: Default ROOT plot"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#lines",
    "href": "posts/my-matplotlib-stylesheet/index.html#lines",
    "title": "My matplotlib stylesheet",
    "section": "LINES",
    "text": "LINES\nIn the LINES section the only default value that I have changed is the lines.linewidth set to 0.5, instead of the 1.5 default value."
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#patches",
    "href": "posts/my-matplotlib-stylesheet/index.html#patches",
    "title": "My matplotlib stylesheet",
    "section": "PATCHES",
    "text": "PATCHES\nIn the PATCHES section I have also decrease the patch.linewidth to 0.5"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#font",
    "href": "posts/my-matplotlib-stylesheet/index.html#font",
    "title": "My matplotlib stylesheet",
    "section": "FONT",
    "text": "FONT\nFor the font I haven’t found any easy way to add a web font into matplotlib without adding some lines of code. For this reason I have installed GNU Free font and modified the order of the sans-serif font to be: Helvetica, FreeSans, Nimbus Sans, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Avant Garde, sans-serif\nIn the FONT section I have set font.weight to regular by default."
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#axes-and-axis",
    "href": "posts/my-matplotlib-stylesheet/index.html#axes-and-axis",
    "title": "My matplotlib stylesheet",
    "section": "AXES and AXIS",
    "text": "AXES and AXIS\nIn the AXES and AXIS sections I tweaked multiple lines. I will report only the modified lines:\n\n\nmy_matplotlibrc.txt\n\n# AXES\naxes.grid           : False   ## display grid or not\naxes.labelsize      : x-large  ## fontsize of the x any y labels\naxes.labelweight    : regular  ## weight of the x and y labels\naxes.formatter.useoffset      : False    ## If True, the tick label formatter\naxes.formatter.offset_threshold : 2     ## When useoffset is True, the offset\n...\n# AXIS\nxaxis.labellocation: right  # alignment of the xaxis label: {left, right, center}\nyaxis.labellocation: top  # alignment of the yaxis label: {bottom, top, center}"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#ticks",
    "href": "posts/my-matplotlib-stylesheet/index.html#ticks",
    "title": "My matplotlib stylesheet",
    "section": "TICKS",
    "text": "TICKS\nMatplotlib’s tick layout is what differs the most from ROOT default’s style. In this case the modified lines were the following:\n\n\nmy_matplotlibrc.txt\n\nxtick.top            : True  ## draw ticks on the top side\nxtick.major.size     : 8    ## major tick size in points\nxtick.minor.size     : 4      ## minor tick size in points\nxtick.major.width    : 0.5    ## major tick width in points\nxtick.minor.width    : 0.5    ## minor tick width in points\nxtick.major.pad      : 6    ## distance to major tick label in points\nxtick.direction      : in    ## direction: in, out, or inout\nxtick.minor.visible  : True  ## visibility of minor ticks on x-axis\nytick.right          : True   ## draw ticks on the right side\nytick.major.size     : 8      ## major tick size in points\nytick.minor.size     : 4      ## minor tick size in points\nytick.major.width    : 0.5    ## major tick width in points\nytick.minor.width    : 0.5    ## minor tick width in points\nytick.major.pad      : 6    ## distance to major tick label in points\nytick.direction      : in     ## direction: in, out, or inout\nytick.minor.visible  : True  ## visibility of minor ticks on y-axis"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#grid",
    "href": "posts/my-matplotlib-stylesheet/index.html#grid",
    "title": "My matplotlib stylesheet",
    "section": "GRID",
    "text": "GRID\nAlthough I used to love grid, they might make the plot a bit “heavy” to read when there are several points and lines. For this reason I kept grids disabled:\n\n\nmy_matplotlibrc.txt\n\ngrid.color       :   k    ## black\ngrid.linestyle   :   --         ## dashed\ngrid.linewidth   :   0.5       ## in points"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#legend",
    "href": "posts/my-matplotlib-stylesheet/index.html#legend",
    "title": "My matplotlib stylesheet",
    "section": "LEGEND",
    "text": "LEGEND\nRegardin the legend handling I got some inspirations by having a look at some common plots used within the community I am working with:\n\n\nmy_matplotlibrc.txt\n\nlegend.frameon       : True     ## if True, draw the legend on a background patch\nlegend.framealpha    : None      ## legend patch transparency\nlegend.edgecolor     : inherit      ## background patch boundary color\nlegend.fancybox      : False     ## if True, use a rounded box for the\n                                 ## legend background, else a rectangle\nlegend.scatterpoints : 3        ## number of scatter points\nlegend.fontsize      : large\nlegend.handlelength  : 0.7      ## the length of the legend lines\nlegend.handleheight  : 1      ## the height of the legend handle\nlegend.handletextpad : 1.2      ## the space between the legend line and legend text\nlegend.borderaxespad : 1      ## the border between the axes and legend edge"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#figure",
    "href": "posts/my-matplotlib-stylesheet/index.html#figure",
    "title": "My matplotlib stylesheet",
    "section": "FIGURE",
    "text": "FIGURE\nAlthough there are really no standard on the figure sizes I like a default 3:2 ratio and a minimum DPI of 300:\n\n\nmy_matplotlibrc.txt\n\nfigure.figsize   : 6, 4       ## figure size in inches\nfigure.dpi       : 300        ## figure dots per inch"
  },
  {
    "objectID": "posts/my-matplotlib-stylesheet/index.html#other-tweakings",
    "href": "posts/my-matplotlib-stylesheet/index.html#other-tweakings",
    "title": "My matplotlib stylesheet",
    "section": "Other tweakings",
    "text": "Other tweakings\nI have set the cap size of the error bars, as by default is 0 and set the histogram binning to \"auto\":\n\n\nmy_matplotlibrc.txt\n\nerrorbar.capsize : 1.5            ## length of end cap on error bars in pixels\nhist.bins : auto                 ## The default number of histogram bins.\n                                  ## If Numpy 1.11 or later is\n                                  ## installed, may also be `auto`"
  },
  {
    "objectID": "posts/a-post-with-jupyter-notebook/index.html",
    "href": "posts/a-post-with-jupyter-notebook/index.html",
    "title": "A post made from a jupyter notebook",
    "section": "",
    "text": "Few days ago I found Quarto. I understood it is an authoring framework based on pandoc and that has full support of jupyter notebooks as input files. Since lot of work I carry on at the moment makes a heavy use of jupyter notebook I decided to try Quarto and use it for two main purposes: the first is as a replacement of jupyter nbconvert that I have intensively used to convert notebooks to html pages.\nI saw that Quarto provides much more flexibility on the layout of the text, images and code, which was exactly what I was looking for. The second way I intend to use Quarto is to publish the present content. At the time of writing, this post is written on an index.ipynb file in my local computer using Visual Studio code. I find extremely pleasant to write mixed content and have a tool that transforms it in a post page of a blog website.\nI will showcase here all the features that I have personally found relevant for the posts I am going to write as well, hoping that this post serves as a quick reference (together with the Quarto user guide)."
  },
  {
    "objectID": "posts/a-post-with-jupyter-notebook/index.html#code-cells",
    "href": "posts/a-post-with-jupyter-notebook/index.html#code-cells",
    "title": "A post made from a jupyter notebook",
    "section": "Code cells",
    "text": "Code cells\nCode cells are pretty straightforward: I just have to write code in a cell and it will be executed and the output eventually frozen by Quarto. I found the freeze option particularly useful and I set it to auto at the time of writing. In this way, the notebooks will be re-rendered only if the source code changes.\n\nimport matplotlib.pyplot as plt\nimport pandas as pd \nimport numpy as np\n\nAt the very base you can just enter some code and save it. If you are using quarto preview the jupyter notebook is executed when it saved (and not when a code cell is executed, but this depends on the saving options of jupyter).\nFor instance, we can write some code and let it display some output like this:\n\nclass TestClass:\n    def __init__(self, params) -> None:\n        self.attributes = params\n    \n    def increment(self, param: int) -> int:\n        return param + 1\n\nobj = TestClass('test')\nobj.increment(10)\n\n11\n\n\nSometimes a cell may contain lot of code that makes it difficult for the reader to keep track of the text. In this case folding the code is very helpful and only requires a special comment to be added at the beginning of the code cell:\n#| code-fold: true\n\nclass TestClass:\n    def __init__(self, params) -> None:\n        self.attributes = params\n    \n    def increment(self, param: int) -> int:\n        return param + 1\n\nobj = TestClass('test')\nobj.increment(10)\nHere below the result of the previous snippet of code:\n\n\nCode\nclass TestClass:\n    def __init__(self, params) -> None:\n        self.attributes = params\n    \n    def increment(self, param: int) -> int:\n        return param + 1\n\nobj = TestClass('test')\nobj.increment(10)\n\n\n11\n\n\nNote that the output of the cell is not folded. This is particularly useful if you have lot of code printing out a plot for example: the code will be folded but the plot will be visible anyway.\nSome other time I wish to completely hide the code while keeping the output visible. In this case the option echo: false does the job:\n#| echo: false\nplt.plot([1,2,3], [4,5,6], 'ro');\nHere below the result of the previous snippet of code:\n\n\n\n\n\nCode cells can be also assigned a file name. This is particularly helpful when there is a post that needs to tackle code among several files. As an example you can have something like:\n#| filename: test.py\n\nclass A:\n    pass\nAnd this would be rendered to:\n\n\n\ntest.py\n\nclass A:\n    pass"
  },
  {
    "objectID": "posts/a-post-with-jupyter-notebook/index.html#controlling-figures-layout",
    "href": "posts/a-post-with-jupyter-notebook/index.html#controlling-figures-layout",
    "title": "A post made from a jupyter notebook",
    "section": "Controlling figures layout",
    "text": "Controlling figures layout\nI find particularly useful the way Quarto helps treating outputs for code cells, especially laying out figures resulting from a code output. Often times I have big plots that I would like to take all the available horizontal space in the page. In this case I can use #| column: page together with on the code cell\n#| column: page\n#| fig-align: center\nfig, ax = plt.subplots(figsize=(8, 5), dpi=150)\nax.plot(range(10), [1,2,3,2,1,2,2,31,1,2])\n\n\n\n\n\nThere is also support for custom layouts when multiple plots are produced. I typically use matplotlib APIs to lay out multiple plots but this features could be useful for images in general and sometimes with libraries where the layout support for subplots is not straightforward. As an example see this snippet:\n#| layout-ncol: 2\n\nfig, ax = plt.subplots()\nax.plot([1,2,3,4], [4,3,2,3], 'ro-')\n\nfig2, ax2 = plt.subplots()\nax2.plot([1,2,3,4], [4,3,1,32], 'b*--')"
  },
  {
    "objectID": "posts/a-post-with-jupyter-notebook/index.html#conclusions",
    "href": "posts/a-post-with-jupyter-notebook/index.html#conclusions",
    "title": "A post made from a jupyter notebook",
    "section": "Conclusions",
    "text": "Conclusions\nThere are several more features that I think I will be using throughout my journey on this blog. There are also some features related to publications that I want to explore as I would like to understand if I can have some publications ready LaTeX documents from jupyter notebooks\nI found Quarto really easy to use and the documentation is fairly straightforward to follow. I hope to post more interesting findings and customization as I will use it :)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Education\nPhD in particle physics | 2019 - 2022\nUniversité Claude Bernard Lyon I\nMaster degree in physics of the matter | 2017-2019\nUniversità degli Studi di Milano-Bicocca\nBachelor degree in physics of the matter | 2017-2019\nUniversità degli Studi di Milano-Bicocca\n\n\nExperience\nCERN Senior fellow | 2022 CERN, Switzerland\nSoftware developer | 2016-2017 Yperesia, Italy"
  }
]