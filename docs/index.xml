<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>G.R.'s Blog</title>
<link>https://grigolet.github.io/index.html</link>
<atom:link href="https://grigolet.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog about data analysis, visualization and sometimes cooking.</description>
<image>
<url>https://grigolet.github.io/profile.png</url>
<title>G.R.'s Blog</title>
<link>https://grigolet.github.io/index.html</link>
</image>
<generator>quarto-1.1</generator>
<lastBuildDate>Thu, 29 Sep 2022 22:00:00 GMT</lastBuildDate>
<item>
  <title>Time Over Threshold in signal processing</title>
  <link>https://grigolet.github.io/posts/time-over-threshold-in-signals/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>A part of my work consists of acquiring the signal induced on a set of copper strips of a gaseous detectors. The signals dynamics such as the height, shape, duration, typically give useful information about what is going on inside the detector. The signal generated by a gasesous detector depends on several factors: - he geometry, layout and working principle of the detector itself; - the electric field applied in the gas medium that allows for the electron created by an ionizing particle to start an avalanche process and move a sufficiently high number of electrons to be detected by the electronics; - the gas used, which greatly affects the dynamic of the avalanche development</p>
<p>Among all of these parameters, I would like to focus on one: the time over threshold. The time over threshold can be defined in different ways. For simplicity, I will define it as the difference of the time between the signal first and last crosses a fixed treshold.</p>
<p>For example, look at the plot Figure&nbsp;1</p>
<div class="cell" data-execution_count="25">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># The holy trininty of libraries that will be used</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># throughout the post</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Just to set the maximum of items to be printed for an array</span></span>
<span id="cb1-8">np.set_printoptions(threshold<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;"># A better style for plots</span></span>
<span id="cb1-11">plt.style.use(<span class="st" style="color: #20794D;">'https://gitlab.cern.ch/-/snippets/2223/raw/master/rpcecogas.mplstyle'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">window_length <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># This file contains 10 waveforms of 520 samples. Each sample is written on a single line</span></span>
<span id="cb2-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"https://gist.githubusercontent.com/grigolet/09ffada96abb2acf0fe34070f0e83211/raw/3880aa89e4b113ea2866ec8e3768c03e98f84118/signals.txt"</span>,</span>
<span id="cb2-4">                header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'waveform'</span>])</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># in the next line I will transform the dataframe into a 2d</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># numpy array with shape (number of signals, window length).</span></span>
<span id="cb2-7">waveforms <span class="op" style="color: #5E5E5E;">=</span> df.waveform.values.reshape((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, window_length))</span>
<span id="cb2-8"></span>
<span id="cb2-9">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb2-10">ax.plot(waveforms.T)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-11">ax.<span class="bu" style="color: null;">set</span>(xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Time [2 ns]'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ADC [a.u.]'</span>, title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Waveforms'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-waveforms" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/fig-waveforms-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: Waveform read-out from a gaseous detector</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Image that we would like to compute the duration of all the signals below a threshold that I arbitrarly fix. For example:</p>
<div class="cell" data-execution_count="201">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Prepare and read the data</span></span>
<span id="cb3-2">window_length <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb3-3">threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8235</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;"># This file contains 10 waveforms of 520 samples. Each sample is written on a single line</span></span>
<span id="cb3-5">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"https://gist.githubusercontent.com/grigolet/09ffada96abb2acf0fe34070f0e83211/raw/3880aa89e4b113ea2866ec8e3768c03e98f84118/signals.txt"</span>,</span>
<span id="cb3-6">                header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'waveform'</span>])</span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># in the next line I will transform the dataframe into a 2d</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># numpy array with shape (number of signals, window length).</span></span>
<span id="cb3-9">waveforms <span class="op" style="color: #5E5E5E;">=</span> df.waveform.values.reshape((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, window_length))</span>
<span id="cb3-10"></span>
<span id="cb3-11">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb3-12"><span class="cf" style="color: #003B4F;">for</span> ix, waveform <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(waveforms):</span>
<span id="cb3-13">    ax.plot(waveform, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"Waveform </span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb3-14">ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb3-15">ax.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'upper left'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb3-16">ax.<span class="bu" style="color: null;">set</span>(xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Time [2 ns]'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ADC [a.u.]'</span>, title<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Waveforms. Threshold at </span><span class="sc" style="color: #5E5E5E;">{</span>threshold<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="tot-by-taking-the-closest-samples" class="level1">
<h1>ToT by taking the closest samples</h1>
<section id="the-1d-case" class="level2">
<h2 class="anchored" data-anchor-id="the-1d-case">The 1d case</h2>
<p>In this case, the easiest and probably more natual approach to compute the ToT would be to get the first sample below the threshold, the last sample below the threshold and do a difference.</p>
<p>This is fairly straightforward in the case of a single signal and it can be accomplished in few different ways:</p>
<div class="cell" data-execution_count="40">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># From the previous cell we have waveforms available in a 2d</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># numpy array of shape (n waveforms, n samples)</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># I will take waveform 8 just for example purposes</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8235</span></span>
<span id="cb4-6">waveform <span class="op" style="color: #5E5E5E;">=</span> waveforms[<span class="dv" style="color: #AD0000;">8</span>, :]</span>
<span id="cb4-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb4-8">ax.plot(waveform)</span>
<span id="cb4-9">ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>&lt;matplotlib.lines.Line2D at 0x7fb662c0cd90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>For the way I defined the time over threshold, I would have to take the first sample before crossing the threshold and the last one before going back</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveform <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># Boolean array indicating which sample is below the threshold</span></span>
<span id="cb6-3">samples_below_threshold</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>array([False, False, False, ..., False, False, False])</code></pre>
</div>
</div>
<p>If I imagine the boolean array defined above as an integer array, I could use <code>np.argmax()</code> to find the first item for which the condition is true, i.e.&nbsp;the first item crossing the threshold.</p>
<p>To find instead the last item I could use <code>np.argmax()</code> but applied to the reversed array, taking into account that the resulting index should be then subtracted with the number of samples of the waveform</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">first_item <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold)</span>
<span id="cb8-2">last_item <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]) <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-3">first_item, last_item</span>
<span id="cb8-4"></span>
<span id="cb8-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb8-6">ax.plot(waveform)</span>
<span id="cb8-7">ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb8-8">ax.axvline(first_item, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>)</span>
<span id="cb8-9">ax.axvline(last_item, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>&lt;matplotlib.lines.Line2D at 0x7fb662bb13f0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="the-2d-case" class="level2">
<h2 class="anchored" data-anchor-id="the-2d-case">The 2d case</h2>
<p>In a case of a 2d array like <code>waveforms</code>, some numpy gym can be used to perform vectorized operation and avoid using <code>for</code> loops.</p>
<p>A trick I often used to remember on which axis I want to perform an operation on a <code>numpy.ndarray</code>: if the numpy array has a shape (x_dim, y_dim, z_dim, …) then the operation I perform the aggregation on is making that axis collapse.</p>
<p>So in the present case, if I have an <code>(n_waveforms, n_samples)</code> array, then I would expect to have the <code>argmax()</code> of each waveform, so an array with a shape <code>(n_waveforms)</code>. This means that <code>axis=0</code> should be preversed and <code>axis=1</code> should collapse, so the <code>np.argmax()</code> operation should have <code>axis=1</code>.</p>
<p>It’s a bit tricky but it’s working fine in my mental model</p>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># Now we have a 2d array of waveforms but</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># an analogue boolean mask</span></span>
<span id="cb10-4">samples_below_threshold</span>
<span id="cb10-5"></span>
<span id="cb10-6">first_items <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># Reverse the array over the samples dimensions to get the last </span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;"># point of threshold crossing</span></span>
<span id="cb10-9">last_items <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="bu" style="color: null;">print</span>(first_items, last_items)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;"># Let's graphically check the results</span></span>
<span id="cb10-14">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb10-15"><span class="cf" style="color: #003B4F;">for</span> ix, waveform <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(waveforms):</span>
<span id="cb10-16">    ax.plot(waveform, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"Waveform </span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-17">    ax.plot(first_items[ix], threshold, <span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.'</span>)</span>
<span id="cb10-18">    ax.plot(last_items[ix], threshold, <span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.'</span>)</span>
<span id="cb10-19">ax.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'upper left'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb10-20">ax.<span class="bu" style="color: null;">set</span>(xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Time [2 ns]'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ADC [a.u.]'</span>, title<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Waveforms. Threshold at </span><span class="sc" style="color: #5E5E5E;">{</span>threshold<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[227   0 232 ... 236 249   0] [230 519 237 ... 240 346 519]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>In the example above I marked the points at which the threshold is crossed. However, in the case of a waveform not crossing the threshold, the <code>np.argmax()</code> function would return 0, so <code>first_item</code> would be equal to 0 and <code>last_item</code> would be equal to <code>window_length - 1</code>, as it is for the 9th waveform:</p>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">n_waveform <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">9</span></span>
<span id="cb12-2">waveform <span class="op" style="color: #5E5E5E;">=</span> waveforms[n_waveform, :]</span>
<span id="cb12-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="bu" style="color: null;">print</span>(first_items[n_waveform], last_items[n_waveform])</span>
<span id="cb12-6">ax.plot(waveform)</span>
<span id="cb12-7">ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 519</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="66">
<pre><code>&lt;matplotlib.lines.Line2D at 0x7fb66347db40&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>So at this step the time over threshold can be simply computed as <code>last_items - first_items</code>, discarding the values equal to <code>window_length - 1</code></p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> last_items <span class="op" style="color: #5E5E5E;">-</span> first_items</span>
<span id="cb15-2">time_over_threshold[time_over_threshold <span class="op" style="color: #5E5E5E;">&lt;</span> (window_length  <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>array([ 3,  5,  1, 69,  4, 97])</code></pre>
</div>
</div>
</section>
</section>
<section id="a-more-accurate-time-over-threshold-by-linear-interpolation" class="level1">
<h1>A more accurate time over threshold by linear interpolation</h1>
<p>The definition of time over threshold in the cases defined above is working well when the average value of this parameter is significantly sufficienclty high. This would mean that the sampling frequency (or the digitizer resolution) are good enough for this timing measurements.</p>
<p>Some other times, the sampling frequency is not so high and the signals are quite fasts, meaning that their time over threshold is getting smaller and smaller. An idea to improve the time resolution could be to precisely compute the intersection between the threshold viewed as an horizontal line and the segment formed by the sample before and after crossing the threshold.</p>
<p>I will label the coordinates of the points for which the threshold is first crossed with and <code>f</code> for <code>first</code> and the lasts with an <code>l</code> for <code>last</code>. The coordinates that are found before the threshold is passed are labelled with <code>b</code> for <code>before</code> and the ones found just after meeting the threshold are labeled with an <code>a</code> for <code>after</code>. The points we are interested in are the x intersection of the first intersection, that I will call <img src="https://latex.codecogs.com/png.latex?x_f"> and the one of the last that will be called <img src="https://latex.codecogs.com/png.latex?x_l">. The time over threshold would be defined by the difference <img src="https://latex.codecogs.com/png.latex?x_l%20-%20x_f">. I will call the threshold <img src="https://latex.codecogs.com/png.latex?y_t">.</p>
<p>The labeling might be a bit confusing but I will leave here an image to make things clearer:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/graph.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Nomenclature used hereafter.</figcaption><p></p>
</figure>
</div>
<section id="the-1d-case-1" class="level2">
<h2 class="anchored" data-anchor-id="the-1d-case-1">The 1d case</h2>
<p>In this case I could set up the code in this way:</p>
<ol type="1">
<li>Find the coordinates before meeting the thresholds, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?(x_%7Bfb%7D,%20y_%7Bfb%7D)"> and <img src="https://latex.codecogs.com/png.latex?(x_%7Blb%7D,%20y_%7Blb%7D)"></li>
<li>Find the coordinates after meeting the thresholds, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?(x_%7Bfa%7D,%20y_%7Bfa%7D)"> and <img src="https://latex.codecogs.com/png.latex?(x_%7Bla%7D,%20y_%7Bla%7D)"></li>
<li>Find <img src="https://latex.codecogs.com/png.latex?x_f"> using some simple line equation: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bx_f-%20x_%7Bfb%7D%7D%7By_t%20-%20y_%7Bfb%7D%7D%20=%20%5Cfrac%7Bx_%7Bfa%7D%20-%20x_%7Bfb%7D%7D%7By_%7Bfa%7D%20-%20y_%7Bfb%7D%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ax_f%20=%20x_%7Bfb%7D%20+%20(x_%7Bfa%7D%20-%20x_%7Bfb%7D)%20%5Cleft(%5Cfrac%7By_t%20-%20y_%7Bfb%7D%7D%7By_%7Bfa%7D%20-%20y_%7Bfb%7D%7D%5Cright)%0A"> In a similar way, for <img src="https://latex.codecogs.com/png.latex?x_l">: <img src="https://latex.codecogs.com/png.latex?%0Ax_l%20=%20x_%7Blb%7D%20+%20(x_%7Bla%7D%20-%20x_%7Blb%7D)%20%5Cleft(%5Cfrac%7By_t%20-%20y_%7Bfb%7D%7D%7By_%7Bla%7D%20-%20y_%7Blb%7D%7D%5Cright)%0A"></li>
<li>Calculate the time over threshold as <img src="https://latex.codecogs.com/png.latex?x_l%20-%20x_f"></li>
</ol>
<div class="cell" data-execution_count="287">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># I'm taking the threshold as before as an example</span></span>
<span id="cb17-2">waveform <span class="op" style="color: #5E5E5E;">=</span> waveforms[<span class="dv" style="color: #AD0000;">8</span>, :]</span>
<span id="cb17-3">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveform <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># Find the indices xfb and xlb</span></span>
<span id="cb17-5">xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb17-6">xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;"># The corresponding yfb and ylb are easy to get:</span></span>
<span id="cb17-8">yfb, ylb <span class="op" style="color: #5E5E5E;">=</span> waveform[xfb], waveform[xlb]</span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;"># Now we can also find the coordinates of the samples</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;"># after meeting the threshold</span></span>
<span id="cb17-11">xfa, yfa <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, waveform[xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb17-12">xla, yla <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, waveform[xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;"># Find xf and xl</span></span>
<span id="cb17-14">xf <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> (xfa <span class="op" style="color: #5E5E5E;">-</span> xfb) <span class="op" style="color: #5E5E5E;">*</span> ((threshold <span class="op" style="color: #5E5E5E;">-</span> yfb) <span class="op" style="color: #5E5E5E;">/</span> (yfa <span class="op" style="color: #5E5E5E;">-</span> yfb))</span>
<span id="cb17-15">xl <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> (xla <span class="op" style="color: #5E5E5E;">-</span> xlb) <span class="op" style="color: #5E5E5E;">*</span> ((threshold <span class="op" style="color: #5E5E5E;">-</span> ylb) <span class="op" style="color: #5E5E5E;">/</span> (yla <span class="op" style="color: #5E5E5E;">-</span> ylb))</span>
<span id="cb17-16">time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> xl <span class="op" style="color: #5E5E5E;">-</span> xf</span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;"># Let's visualize everything</span></span>
<span id="cb17-19">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb17-20">ax.plot(waveform, <span class="st" style="color: #20794D;">'.-'</span>)</span>
<span id="cb17-21">ax.axvline(xfb, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb17-22">ax.axvline(xf, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C2'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb17-23">ax.axvline(xfa, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb17-24"></span>
<span id="cb17-25">ax.axvline(xlb, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb17-26">ax.axvline(xl, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C2'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb17-27">ax.axvline(xla, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb17-28"></span>
<span id="cb17-29">ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C1'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb17-30"></span>
<span id="cb17-31"><span class="co" style="color: #5E5E5E;"># zoom in in the region of interest</span></span>
<span id="cb17-32">ax.<span class="bu" style="color: null;">set</span>(xlim<span class="op" style="color: #5E5E5E;">=</span>(xfb <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span>, xla <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span>), title<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Time over threshold = </span><span class="sc" style="color: #5E5E5E;">{</span>time_over_threshold<span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="287">
<pre><code>[(243.0, 351.0), Text(0.5, 1.0, 'Time over threshold = 96.4')]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>As expected, the time over threshold is now computed as the intersection between the horizontal lines and the segments first and last crossing the threshold. The code above is failing in case the threshold is not crossing any segment:</p>
<div class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Waveform 9 is not crossing the threshold</span></span>
<span id="cb19-2">waveform <span class="op" style="color: #5E5E5E;">=</span> waveforms[<span class="dv" style="color: #AD0000;">9</span>, :]</span>
<span id="cb19-3">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveform <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;"># np.argmax returns 0 if nothing is found</span></span>
<span id="cb19-5">xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;"># This would generated some issues because it's 520 - 0 = 520 </span></span>
<span id="cb19-7">xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]) </span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;"># This part will throw an error because waveform has only</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;"># 520 samples and waveform[520] is outside range</span></span>
<span id="cb19-10">yfb, ylb <span class="op" style="color: #5E5E5E;">=</span> waveform[xfb], waveform[xlb]</span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;"># ...</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>IndexError: index 520 is out of bounds for axis 0 with size 520</code></pre>
</div>
</div>
<p>The code is failing because it’s not possible to find the x coordinates for the segment last crossing the threshold. This results in a value of <img src="https://latex.codecogs.com/png.latex?x_%7Blb%7D"> of 520 that is outside the range of the array (which starts from 0 to 519). A possible solution could be to set the values of <img src="https://latex.codecogs.com/png.latex?x_%7Blb%7D"> to be 0 or <code>np.nan</code> in case they are found to be 520. This would result in a time over threshold of 0. This is the cleaniest solution I could find:</p>
<div class="cell" data-execution_count="91">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">waveform <span class="op" style="color: #5E5E5E;">=</span> waveforms[<span class="dv" style="color: #AD0000;">9</span>, :]</span>
<span id="cb21-2">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveform <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb21-3">xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># Set xfb to be nan in case no threshold crossing</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;"># is found. The same for xlb</span></span>
<span id="cb21-6">xfb <span class="op" style="color: #5E5E5E;">=</span> np.where(xfb <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, xfb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb21-7">xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]) </span>
<span id="cb21-8">xlb <span class="op" style="color: #5E5E5E;">=</span> np.where(xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length, xlb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;"># The corresponding yfb and ylb are easy to get:</span></span>
<span id="cb21-10">yfb, ylb <span class="op" style="color: #5E5E5E;">=</span> waveform[xfb], waveform[xlb]</span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;"># ... time over threshold will result in a 0 value</span></span></code></pre></div>
</div>
</section>
<section id="the-2d-case-1" class="level2">
<h2 class="anchored" data-anchor-id="the-2d-case-1">The 2d case</h2>
<p>The 2d case is a bit more complicated as it involves the usual <code>numpy</code> model to solve this problem in an efficient way. Nevertheless, the steps to approach the problem are the same so the code looks like the following:</p>
<div class="cell" data-execution_count="286">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;"># Find the indices xfb and xlb</span></span>
<span id="cb22-3">xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;"># Add np.where condition to handle signal without threshold crossing</span></span>
<span id="cb22-5">xfb <span class="op" style="color: #5E5E5E;">=</span> np.where(xfb <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, xfb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb22-6">xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb22-7">xlb <span class="op" style="color: #5E5E5E;">=</span> np.where(xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length, xlb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;"># Taking indices along a 2d array is a bit</span></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;"># more complicated. There are few different</span></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;"># ways to do it</span></span>
<span id="cb22-11">yfb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb22-12">ylb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb22-13"></span>
<span id="cb22-14">xfa <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb22-15">yfa <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb22-16">xla <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb22-17">yla <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb22-18"></span>
<span id="cb22-19">xf <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> (xfa <span class="op" style="color: #5E5E5E;">-</span> xfb) <span class="op" style="color: #5E5E5E;">*</span> ((threshold <span class="op" style="color: #5E5E5E;">-</span> yfb) <span class="op" style="color: #5E5E5E;">/</span> (yfa <span class="op" style="color: #5E5E5E;">-</span> yfb))</span>
<span id="cb22-20">xl <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> (xla <span class="op" style="color: #5E5E5E;">-</span> xlb) <span class="op" style="color: #5E5E5E;">*</span> ((threshold <span class="op" style="color: #5E5E5E;">-</span> ylb) <span class="op" style="color: #5E5E5E;">/</span> (yla <span class="op" style="color: #5E5E5E;">-</span> ylb))</span>
<span id="cb22-21">time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> xl <span class="op" style="color: #5E5E5E;">-</span> xf</span>
<span id="cb22-22"></span>
<span id="cb22-23"><span class="co" style="color: #5E5E5E;"># Let's visualize everything</span></span>
<span id="cb22-24">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb22-25"><span class="cf" style="color: #003B4F;">for</span> ix, waveform <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(waveforms):</span>
<span id="cb22-26">    ax <span class="op" style="color: #5E5E5E;">=</span> axs.flat[ix]</span>
<span id="cb22-27">    ax.plot(waveform, <span class="st" style="color: #20794D;">'.-'</span>)</span>
<span id="cb22-28">    ax.axvline(xfb[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb22-29">    ax.axvline(xf[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C2'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb22-30">    ax.axvline(xfa[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb22-31"></span>
<span id="cb22-32">    ax.axvline(xlb[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb22-33">    ax.axvline(xl[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C2'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb22-34">    ax.axvline(xla[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb22-35"></span>
<span id="cb22-36">    ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C1'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb22-37"></span>
<span id="cb22-38">    ax.<span class="bu" style="color: null;">set</span>(xlim<span class="op" style="color: #5E5E5E;">=</span>(xfb[ix] <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span>, xla[ix] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span>), </span>
<span id="cb22-39">    ylim<span class="op" style="color: #5E5E5E;">=</span>(threshold <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>, threshold <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>),</span>
<span id="cb22-40">    title<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Waveform </span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">Time over threshold = </span><span class="sc" style="color: #5E5E5E;">{</span>time_over_threshold[ix]<span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;"> samples'</span>)</span>
<span id="cb22-41">    fig.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_389329/2995661854.py:20: RuntimeWarning: divide by zero encountered in true_divide
  xl = xlb + (xla - xlb) * ((threshold - ylb) / (yla - ylb))</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>You may notice that there are few corner cases that may arise. For instance, have a look at waveform 5: the resulting time over threshold is <code>nan</code>. In this case, if the segment defined by <img src="https://latex.codecogs.com/png.latex?(x_%7Blb%7D,%20y_%7Blb%7D),%20(x_%7Bla%7D,%20y_%7Bla%7D)"> and crossing the threshold is parallel to the threshold itself, the values of either <img src="https://latex.codecogs.com/png.latex?y_%7Bfa%7D%20-%20y_%7Bfb%7D"> or <img src="https://latex.codecogs.com/png.latex?y_%7Bla%7D%20-%20y_%7Blb%7D"> are equal to 0, resulting in an error similar to:</p>
<pre><code>RuntimeWarning: invalid value encountered in true_divide
  xl = xlb + (xla - xlb) * ((threshold - ylb) / (yla - ylb))</code></pre>
<p>A possible solution to this is to handle the division using <code>np.divide</code>, which allows to use a <code>where</code> option and that allows to avoid to <code>try/catch</code> or use a context manager to handle the error. For more information see this <a href="https://stackoverflow.com/questions/26248654/how-to-return-0-with-divide-by-zero">Stack overflow post</a>.</p>
<p>The code above will become the following:</p>
<div class="cell" data-execution_count="285">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># Find the indices xfb and xlb</span></span>
<span id="cb25-3">xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;"># Add np.where condition to handle signal without threshold crossing</span></span>
<span id="cb25-5">xfb <span class="op" style="color: #5E5E5E;">=</span> np.where(xfb <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, xfb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb25-6">xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb25-7">xlb <span class="op" style="color: #5E5E5E;">=</span> np.where(xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length, xlb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;"># Taking indices along a 2d array is a bit</span></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;"># more complicated. There are few different</span></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;"># ways to do it</span></span>
<span id="cb25-11">yfb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb25-12">ylb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb25-13"></span>
<span id="cb25-14">xfa <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb25-15">yfa <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb25-16">xla <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb25-17">yla <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb25-18"></span>
<span id="cb25-19"><span class="co" style="color: #5E5E5E;"># temp_yf and temp_yl are the arrays to use in case the 'where' condition is False. </span></span>
<span id="cb25-20"><span class="co" style="color: #5E5E5E;"># If the 'where' condition is true, then the np.divide() result is used instead</span></span>
<span id="cb25-21">temp_yf, temp_yl <span class="op" style="color: #5E5E5E;">=</span> np.zeros_like(yfa, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>), np.zeros_like(ylb, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>)</span>
<span id="cb25-22">xf <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> (xfa <span class="op" style="color: #5E5E5E;">-</span> xfb) <span class="op" style="color: #5E5E5E;">*</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> yfb) , (yfa <span class="op" style="color: #5E5E5E;">-</span> yfb), out<span class="op" style="color: #5E5E5E;">=</span>temp_yf, where<span class="op" style="color: #5E5E5E;">=</span>(yfa <span class="op" style="color: #5E5E5E;">-</span> yfb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb25-23">xl <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> (xla <span class="op" style="color: #5E5E5E;">-</span> xlb) <span class="op" style="color: #5E5E5E;">*</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> ylb) , (yla <span class="op" style="color: #5E5E5E;">-</span> ylb), out<span class="op" style="color: #5E5E5E;">=</span>temp_yl, where<span class="op" style="color: #5E5E5E;">=</span>(yla <span class="op" style="color: #5E5E5E;">-</span> ylb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb25-24">time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> xl <span class="op" style="color: #5E5E5E;">-</span> xf</span>
<span id="cb25-25"></span>
<span id="cb25-26"><span class="co" style="color: #5E5E5E;"># Let's visualize everything</span></span>
<span id="cb25-27">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb25-28"><span class="cf" style="color: #003B4F;">for</span> ix, waveform <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(waveforms):</span>
<span id="cb25-29">    ax <span class="op" style="color: #5E5E5E;">=</span> axs.flat[ix]</span>
<span id="cb25-30">    ax.plot(waveform, <span class="st" style="color: #20794D;">'.-'</span>)</span>
<span id="cb25-31">    ax.axvline(xfb[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb25-32">    ax.axvline(xf[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C2'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb25-33">    ax.axvline(xfa[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb25-34"></span>
<span id="cb25-35">    ax.axvline(xlb[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb25-36">    ax.axvline(xl[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C2'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb25-37">    ax.axvline(xla[ix], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C3'</span>)</span>
<span id="cb25-38"></span>
<span id="cb25-39">    ax.axhline(threshold, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'C1'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb25-40"></span>
<span id="cb25-41">    ax.<span class="bu" style="color: null;">set</span>(xlim<span class="op" style="color: #5E5E5E;">=</span>(xfb[ix] <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span>, xla[ix] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span>), </span>
<span id="cb25-42">    ylim<span class="op" style="color: #5E5E5E;">=</span>(threshold <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>, threshold <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>),</span>
<span id="cb25-43">    title<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Waveform </span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">Time over threshold = </span><span class="sc" style="color: #5E5E5E;">{</span>time_over_threshold[ix]<span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;"> samples'</span>)</span>
<span id="cb25-44">    fig.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="handling-corner-cases" class="level2">
<h2 class="anchored" data-anchor-id="handling-corner-cases">Handling corner cases</h2>
<p>Unfortunately, the code below does not handle all the cases. Let’s wrap the previous code into a function and prepare some test cases</p>
<div class="cell" data-execution_count="508">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;">def</span> compute_time_over_threshold(data: np.ndarray, threshold: <span class="bu" style="color: null;">float</span> <span class="op" style="color: #5E5E5E;">|</span> <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">|</span> np.ndarray) <span class="op" style="color: #5E5E5E;">-&gt;</span> np.ndarray: </span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;">"""Compute the time over threshold for a 1d or 2d array given a fixed threshold. The</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">    time over threshold is defined as the difference between the intersection of the</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">    threshold with the segments of the samples: the last - the first segments</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;">    crossing this threshold define the tot. In case no samples cross the</span></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;">    tot, the resulting value is 0.as_integer_ratio</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;">    data: ndarray</span></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;">        1d or 2d array of shape (n_waveforms, n_samples)</span></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;">    threshold: float or int or ndarray (n_waveforms)</span></span>
<span id="cb26-13"><span class="co" style="color: #5E5E5E;">        a fixed threshold for all the waveforms or a set of threshold</span></span>
<span id="cb26-14"><span class="co" style="color: #5E5E5E;">        for each waveform</span></span>
<span id="cb26-15"></span>
<span id="cb26-16"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb26-17"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb26-18"><span class="co" style="color: #5E5E5E;">    out: ndarray</span></span>
<span id="cb26-19"><span class="co" style="color: #5E5E5E;">        a 1d array of the time over thresholds of shape (n_waveforms)</span></span>
<span id="cb26-20"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb26-21">    <span class="co" style="color: #5E5E5E;"># In case of a 1d array of shape (n_samples), convert it to a 2d</span></span>
<span id="cb26-22">    <span class="co" style="color: #5E5E5E;"># array of shape (1, n_samples), so that the code can be used for</span></span>
<span id="cb26-23">    <span class="co" style="color: #5E5E5E;"># both 1d and 2d array</span></span>
<span id="cb26-24">    <span class="cf" style="color: #003B4F;">if</span> data.ndim <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb26-25">        waveforms <span class="op" style="color: #5E5E5E;">=</span> data[<span class="va" style="color: #111111;">None</span>, :]</span>
<span id="cb26-26">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb26-27">        waveforms <span class="op" style="color: #5E5E5E;">=</span> data</span>
<span id="cb26-28">    <span class="co" style="color: #5E5E5E;"># The same operation for threshold:</span></span>
<span id="cb26-29">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(threshold, np.ndarray):</span>
<span id="cb26-30">        threshold <span class="op" style="color: #5E5E5E;">=</span> np.array([threshold])</span>
<span id="cb26-31"></span>
<span id="cb26-32">    window_length <span class="op" style="color: #5E5E5E;">=</span> waveforms.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb26-33">    </span>
<span id="cb26-34">    samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold[:, <span class="va" style="color: #111111;">None</span>]</span>
<span id="cb26-35">    <span class="co" style="color: #5E5E5E;"># Find the indices xfb and xlb</span></span>
<span id="cb26-36">    xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb26-37">    <span class="co" style="color: #5E5E5E;"># Add np.where condition to handle signal without threshold crossing</span></span>
<span id="cb26-38">    xfb <span class="op" style="color: #5E5E5E;">=</span> np.where(xfb <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, xfb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb26-39">    xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb26-40">    xlb <span class="op" style="color: #5E5E5E;">=</span> np.where(xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, xlb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb26-41">    <span class="co" style="color: #5E5E5E;"># Taking indices along a 2d array is a bit</span></span>
<span id="cb26-42">    <span class="co" style="color: #5E5E5E;"># more complicated. There are few different</span></span>
<span id="cb26-43">    <span class="co" style="color: #5E5E5E;"># ways to do it</span></span>
<span id="cb26-44">    yfb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb26-45">    ylb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb26-46"></span>
<span id="cb26-47">    xfa <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb26-48">    yfa <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb26-49">    xla <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb26-50">    yla <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb26-51"></span>
<span id="cb26-52">    <span class="co" style="color: #5E5E5E;"># temp_yf and temp_yl are the arrays to use in case the 'where' condition is False. </span></span>
<span id="cb26-53">    <span class="co" style="color: #5E5E5E;"># If the 'where' condition is true, then the np.divide() result is used instead</span></span>
<span id="cb26-54">    temp_yf, temp_yl <span class="op" style="color: #5E5E5E;">=</span> np.zeros_like(yfa, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>), np.zeros_like(ylb, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>)</span>
<span id="cb26-55">    xf <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> (xfa <span class="op" style="color: #5E5E5E;">-</span> xfb) <span class="op" style="color: #5E5E5E;">*</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> yfb) , (yfa <span class="op" style="color: #5E5E5E;">-</span> yfb), out<span class="op" style="color: #5E5E5E;">=</span>temp_yf, where<span class="op" style="color: #5E5E5E;">=</span>(yfa <span class="op" style="color: #5E5E5E;">-</span> yfb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb26-56">    xl <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> (xla <span class="op" style="color: #5E5E5E;">-</span> xlb) <span class="op" style="color: #5E5E5E;">*</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> ylb) , (yla <span class="op" style="color: #5E5E5E;">-</span> ylb), out<span class="op" style="color: #5E5E5E;">=</span>temp_yl, where<span class="op" style="color: #5E5E5E;">=</span>(yla <span class="op" style="color: #5E5E5E;">-</span> ylb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb26-57">    time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> xl <span class="op" style="color: #5E5E5E;">-</span> xf</span>
<span id="cb26-58"></span>
<span id="cb26-59">    <span class="cf" style="color: #003B4F;">return</span> time_over_threshold</span>
<span id="cb26-60"></span>
<span id="cb26-61">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb26-62">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb26-63">tot <span class="op" style="color: #5E5E5E;">=</span> compute_time_over_threshold(waveform_test, threshold_test)</span>
<span id="cb26-64">expected_tot <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb26-65">tot, expected_tot</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="508">
<pre><code>(array([0.]), array([4]))</code></pre>
</div>
</div>
<p>Here I wrapped everything into a function and added few initial lines of codes to transform a 1d array into a 2d array with the first dimension set to 1. This allows me to reuse the same code for the case in which we have a single waveform or multiple ones. The same applies for the threshold: if it is a scalar then it’s converted to a 1d array.</p>
<p>Let’s test the function with a simple case: there are no points going below the threshold:</p>
<div class="cell" data-execution_count="504">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb28-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb28-3">tot <span class="op" style="color: #5E5E5E;">=</span> compute_time_over_threshold(waveform_test, threshold_test)</span>
<span id="cb28-4">expected_tot <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb28-5">tot, expected_tot</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="504">
<pre><code>(array([0.]), array([0]))</code></pre>
</div>
</div>
<p>So far so good. Now I want to test a simple case in which the time over threshold should be a simple scalar value.</p>
<div class="cell" data-execution_count="505">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb30-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb30-3">tot <span class="op" style="color: #5E5E5E;">=</span> compute_time_over_threshold(waveform_test, threshold_test)</span>
<span id="cb30-4">expected_tot <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">3</span>])</span>
<span id="cb30-5">tot, expected_tot</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="505">
<pre><code>(array([3.]), array([3]))</code></pre>
</div>
</div>
<p>The time over threshold is working fine in this case. Few other corners cases: all samples are below threshold, so the computed time over threshold should be equal to the window length</p>
<div class="cell" data-execution_count="507">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb32-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb32-3">tot <span class="op" style="color: #5E5E5E;">=</span> compute_time_over_threshold(waveform_test, threshold_test)</span>
<span id="cb32-4">expected_tot <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb32-5">tot, expected_tot</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="507">
<pre><code>(array([0.]), array([4]))</code></pre>
</div>
</div>
<p>In this case the time over threshold is not computed properly. The issue arises due to the way <code>xlb</code> is handled. In particular, in line <code>40</code>, the part <code>xlb = np.where(xlb != window_length - 1, xlb, 0)</code> is setting the values of <code>xlb</code> to 0 in case <code>xlb == window_length - 1</code>. The problem is that there are two cases in which <code>xlb</code> could be equal to <code>window_length - 1</code>. One case is when the last sample is actually the last crossing the threshold. The second is the one where no samples are crossing the threshold, so <code>np.argmax()</code> returns the first item of the array, which in the reversed case is <code>window_length - 1</code>.</p>
<p>For this reason, it is important to distinguish the two cases and handle them separately. In the case of two conditions <code>xlb == window_length - 1</code> and <code>np.all(samples_below_threshold == True, axis=1)</code> happening at the same time then all the samples are already below the threshold, thus the time over threshold will be equal to the <code>window_length</code>. Instead, in the case of <code>xlb == window_length - 1</code> and <code>np.any(samples_below_threshold == True, axis=1)</code> it means there is at least one sample below the threshold so we can calculate the time over threshold as expected. It could be all the samples but in that case we would fall into the previous condition, so it should be already handled.</p>
<p>Additionally, <code>xla</code> should be also modified: if <code>xlb == window_length - 1</code> then it means the last sample is still below the threshold, so <code>xla</code> can be set to be equal to <code>xlb</code> in order to compute the time over threshold on the last point (which is a segment delimited by <img src="https://latex.codecogs.com/png.latex?x_%7Bla%7D,%20x_%7Blb%7D">, so a segment with length 0). Otherwsise, <code>xlb</code> can be set to <code>xla + 1</code> as usual.</p>
<p>Below the updated code:</p>
<div class="cell" data-execution_count="509">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">def</span> compute_time_over_threshold(data: np.ndarray, threshold: <span class="bu" style="color: null;">float</span> <span class="op" style="color: #5E5E5E;">|</span> <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">|</span> np.ndarray) <span class="op" style="color: #5E5E5E;">-&gt;</span> np.ndarray: </span>
<span id="cb34-2">    <span class="co" style="color: #5E5E5E;">"""Compute the time over threshold for a 1d or 2d array given a fixed threshold. The</span></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;">    time over threshold is defined as the difference between the intersection of the</span></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;">    threshold with the segments of the samples: the last - the first segments</span></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;">    crossing this threshold define the tot. In case no samples cross the</span></span>
<span id="cb34-6"><span class="co" style="color: #5E5E5E;">    tot, the resulting value is 0.as_integer_ratio</span></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb34-8"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb34-10"><span class="co" style="color: #5E5E5E;">    data: ndarray</span></span>
<span id="cb34-11"><span class="co" style="color: #5E5E5E;">        1d or 2d array of shape (n_waveforms, n_samples)</span></span>
<span id="cb34-12"><span class="co" style="color: #5E5E5E;">    threshold: float or int or ndarray (n_waveforms)</span></span>
<span id="cb34-13"><span class="co" style="color: #5E5E5E;">        a fixed threshold for all the waveforms or a set of threshold</span></span>
<span id="cb34-14"><span class="co" style="color: #5E5E5E;">        for each waveform</span></span>
<span id="cb34-15"></span>
<span id="cb34-16"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb34-17"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb34-18"><span class="co" style="color: #5E5E5E;">    out: ndarray</span></span>
<span id="cb34-19"><span class="co" style="color: #5E5E5E;">        a 1d array of the time over thresholds of shape (n_waveforms)</span></span>
<span id="cb34-20"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb34-21">    <span class="co" style="color: #5E5E5E;"># In case of a 1d array of shape (n_samples), convert it to a 2d</span></span>
<span id="cb34-22">    <span class="co" style="color: #5E5E5E;"># array of shape (1, n_samples), so that the code can be used for</span></span>
<span id="cb34-23">    <span class="co" style="color: #5E5E5E;"># both 1d and 2d array</span></span>
<span id="cb34-24">    <span class="cf" style="color: #003B4F;">if</span> data.ndim <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb34-25">        waveforms <span class="op" style="color: #5E5E5E;">=</span> data[<span class="va" style="color: #111111;">None</span>, :]</span>
<span id="cb34-26">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb34-27">        waveforms <span class="op" style="color: #5E5E5E;">=</span> data</span>
<span id="cb34-28">    <span class="co" style="color: #5E5E5E;"># The same operation for threshold:</span></span>
<span id="cb34-29">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(threshold, np.ndarray):</span>
<span id="cb34-30">        threshold <span class="op" style="color: #5E5E5E;">=</span> np.array([threshold])</span>
<span id="cb34-31">    </span>
<span id="cb34-32">    samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold[:, <span class="va" style="color: #111111;">None</span>]</span>
<span id="cb34-33">    window_length <span class="op" style="color: #5E5E5E;">=</span> waveforms.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb34-34"></span>
<span id="cb34-35">    xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb34-36">    xfb <span class="op" style="color: #5E5E5E;">=</span> np.where(xfb <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, xfb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb34-37">    xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb34-38">    <span class="co" style="color: #5E5E5E;"># Notice I removed the np.where() condition on xlb</span></span>
<span id="cb34-39"></span>
<span id="cb34-40">    yfb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb34-41">    ylb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb34-42"></span>
<span id="cb34-43">    xfa <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb34-44">    yfa <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfa[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb34-45">    <span class="co" style="color: #5E5E5E;"># Here I put a condition on xla: if xlb is the last item, then xla</span></span>
<span id="cb34-46">    <span class="co" style="color: #5E5E5E;"># should be the same as xlb, so the segment (xlb-xla) is of length 0</span></span>
<span id="cb34-47">    xla <span class="op" style="color: #5E5E5E;">=</span> np.where(xlb <span class="op" style="color: #5E5E5E;">==</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, xlb, xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb34-48">    yla <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xla[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb34-49"></span>
<span id="cb34-50">    xf <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> yfb) , (yfa <span class="op" style="color: #5E5E5E;">-</span> yfb), out<span class="op" style="color: #5E5E5E;">=</span>np.zeros_like(yfa, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>), where<span class="op" style="color: #5E5E5E;">=</span>((yfa <span class="op" style="color: #5E5E5E;">-</span> yfb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>)))</span>
<span id="cb34-51">    xl <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> ylb) , (yla <span class="op" style="color: #5E5E5E;">-</span> ylb), out<span class="op" style="color: #5E5E5E;">=</span>np.zeros_like(yfa, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>), where<span class="op" style="color: #5E5E5E;">=</span>((yla <span class="op" style="color: #5E5E5E;">-</span> ylb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>)))</span>
<span id="cb34-52">    <span class="co" style="color: #5E5E5E;"># Use np.select() as a case statement:</span></span>
<span id="cb34-53">    time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> np.select(condlist<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb34-54">        (xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">all</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">True</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)),  <span class="co" style="color: #5E5E5E;"># all points crossing threshold</span></span>
<span id="cb34-55">        (xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">any</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">True</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)),  <span class="co" style="color: #5E5E5E;"># at least one point crossing threshold</span></span>
<span id="cb34-56">        (xlb <span class="op" style="color: #5E5E5E;">==</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">all</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">False</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)), <span class="co" style="color: #5E5E5E;"># no real points crossing threshold</span></span>
<span id="cb34-57">        (xlb <span class="op" style="color: #5E5E5E;">==</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">any</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">True</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)), <span class="co" style="color: #5E5E5E;"># last point crossing threshold</span></span>
<span id="cb34-58">    ], choicelist<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb34-59">        window_length,</span>
<span id="cb34-60">        xl<span class="op" style="color: #5E5E5E;">-</span>xf,</span>
<span id="cb34-61">        <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb34-62">        xl<span class="op" style="color: #5E5E5E;">-</span>xf</span>
<span id="cb34-63">    ])</span>
<span id="cb34-64">    </span>
<span id="cb34-65">    <span class="cf" style="color: #003B4F;">return</span> time_over_threshold</span></code></pre></div>
</div>
<p>As you can see I removed the <code>np.where()</code> condition onf <code>xlb</code> and added one on <code>xla</code>. If I didn’t, then when <code>xlb</code> is equal to <code>window_length - 1</code>, <code>xla</code> would be equal to <code>window_length</code>, resulting in an error when trying to access the array since the last item is at <code>window_length - 1</code>.</p>
<p>Also, I added <code>np.select()</code> which I usually think of as a n-dimensional version of a case statement. In case <code>xlb != window_length - 1</code> there could be either all points crossing the threshold or at least one, so the time over threshold would be either the whole <code>window_length</code> or the computed <code>xl - xf</code> value.</p>
<p>In case <code>xlb == window_length - 1</code> then there could be either no points at all crossing the threshold (<code>time_over_threshold = 0</code>) or there could be only the lat one crossing it, so the time over threshold would be again computed in the standard way of <code>xl - xf</code>.</p>
<p>Now the case in which the first sample is already below the threshold but not the last is correctly handled:</p>
<div class="cell" data-execution_count="511">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb35-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb35-3">tot <span class="op" style="color: #5E5E5E;">=</span> compute_time_over_threshold(waveform_test, threshold_test)</span>
<span id="cb35-4">expected_tot <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">2.5</span>])</span>
<span id="cb35-5">tot, expected_tot</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="511">
<pre><code>(array([2.5]), array([2.5]))</code></pre>
</div>
</div>
<p>Here below you can find the final the final code I use for the time over threshold calculation and few test cases:</p>
<div class="cell" data-execution_count="404">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;">def</span> compute_time_over_threshold(data: np.ndarray, threshold: <span class="bu" style="color: null;">float</span> <span class="op" style="color: #5E5E5E;">|</span> <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">|</span> np.ndarray) <span class="op" style="color: #5E5E5E;">-&gt;</span> np.ndarray: </span>
<span id="cb37-2">    <span class="co" style="color: #5E5E5E;">"""Compute the time over threshold for a 1d or 2d array given a fixed threshold. The</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">    time over threshold is defined as the difference between the intersection of the</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">    threshold with the segments of the samples: the last - the first segments</span></span>
<span id="cb37-5"><span class="co" style="color: #5E5E5E;">    crossing this threshold define the tot. In case no samples cross the</span></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;">    tot, the resulting value is 0.as_integer_ratio</span></span>
<span id="cb37-7"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb37-9"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb37-10"><span class="co" style="color: #5E5E5E;">    data: ndarray</span></span>
<span id="cb37-11"><span class="co" style="color: #5E5E5E;">        1d or 2d array of shape (n_waveforms, n_samples)</span></span>
<span id="cb37-12"><span class="co" style="color: #5E5E5E;">    threshold: float or int or ndarray (n_waveforms)</span></span>
<span id="cb37-13"><span class="co" style="color: #5E5E5E;">        a fixed threshold for all the waveforms or a set of threshold</span></span>
<span id="cb37-14"><span class="co" style="color: #5E5E5E;">        for each waveform</span></span>
<span id="cb37-15"></span>
<span id="cb37-16"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb37-17"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb37-18"><span class="co" style="color: #5E5E5E;">    out: ndarray</span></span>
<span id="cb37-19"><span class="co" style="color: #5E5E5E;">        a 1d array of the time over thresholds of shape (n_waveforms)</span></span>
<span id="cb37-20"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb37-21">    <span class="co" style="color: #5E5E5E;"># In case of a 1d array of shape (n_samples), convert it to a 2d</span></span>
<span id="cb37-22">    <span class="co" style="color: #5E5E5E;"># array of shape (1, n_samples), so that the code can be used for</span></span>
<span id="cb37-23">    <span class="co" style="color: #5E5E5E;"># both 1d and 2d array</span></span>
<span id="cb37-24">    <span class="cf" style="color: #003B4F;">if</span> data.ndim <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb37-25">        waveforms <span class="op" style="color: #5E5E5E;">=</span> data[<span class="va" style="color: #111111;">None</span>, :]</span>
<span id="cb37-26">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb37-27">        waveforms <span class="op" style="color: #5E5E5E;">=</span> data</span>
<span id="cb37-28">    <span class="co" style="color: #5E5E5E;"># The same operation for threshold:</span></span>
<span id="cb37-29">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(threshold, np.ndarray):</span>
<span id="cb37-30">        threshold <span class="op" style="color: #5E5E5E;">=</span> np.array([threshold])</span>
<span id="cb37-31">    </span>
<span id="cb37-32">    samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold[:, <span class="va" style="color: #111111;">None</span>]</span>
<span id="cb37-33">    window_length <span class="op" style="color: #5E5E5E;">=</span> waveforms.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb37-34"></span>
<span id="cb37-35">    xfb <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb37-36">    xfb <span class="op" style="color: #5E5E5E;">=</span> np.where(xfb <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, xfb, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb37-37">    xlb <span class="op" style="color: #5E5E5E;">=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb37-38"></span>
<span id="cb37-39">    yfb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb37-40">    ylb <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xlb[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb37-41"></span>
<span id="cb37-42">    xfa <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb37-43">    yfa <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xfa[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb37-44">    xla <span class="op" style="color: #5E5E5E;">=</span> np.where(xlb <span class="op" style="color: #5E5E5E;">==</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, xlb, xlb <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb37-45">    yla <span class="op" style="color: #5E5E5E;">=</span> np.take_along_axis(waveforms, xla[:, <span class="va" style="color: #111111;">None</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).flatten()</span>
<span id="cb37-46"></span>
<span id="cb37-47">    xf <span class="op" style="color: #5E5E5E;">=</span> xfb <span class="op" style="color: #5E5E5E;">+</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> yfb) , (yfa <span class="op" style="color: #5E5E5E;">-</span> yfb), out<span class="op" style="color: #5E5E5E;">=</span>np.zeros_like(yfa, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>), where<span class="op" style="color: #5E5E5E;">=</span>((yfa <span class="op" style="color: #5E5E5E;">-</span> yfb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>)))</span>
<span id="cb37-48">    xl <span class="op" style="color: #5E5E5E;">=</span> xlb <span class="op" style="color: #5E5E5E;">+</span> (np.divide((threshold <span class="op" style="color: #5E5E5E;">-</span> ylb) , (yla <span class="op" style="color: #5E5E5E;">-</span> ylb), out<span class="op" style="color: #5E5E5E;">=</span>np.zeros_like(yfa, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float64'</span>), where<span class="op" style="color: #5E5E5E;">=</span>((yla <span class="op" style="color: #5E5E5E;">-</span> ylb) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>)))</span>
<span id="cb37-49">    time_over_threshold <span class="op" style="color: #5E5E5E;">=</span> np.select(condlist<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-50">        (xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">all</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">True</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)),  <span class="co" style="color: #5E5E5E;"># all points crossing threshold</span></span>
<span id="cb37-51">        (xlb <span class="op" style="color: #5E5E5E;">!=</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">any</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">True</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)),  <span class="co" style="color: #5E5E5E;"># at least one point crossing threshold</span></span>
<span id="cb37-52">        (xlb <span class="op" style="color: #5E5E5E;">==</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">all</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">False</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)), <span class="co" style="color: #5E5E5E;"># no real point crossing threshold</span></span>
<span id="cb37-53">        (xlb <span class="op" style="color: #5E5E5E;">==</span> window_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (np.<span class="bu" style="color: null;">any</span>(samples_below_threshold <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">True</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)), <span class="co" style="color: #5E5E5E;"># last point</span></span>
<span id="cb37-54">    ], choicelist<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-55">        window_length,</span>
<span id="cb37-56">        xl<span class="op" style="color: #5E5E5E;">-</span>xf,</span>
<span id="cb37-57">        <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb37-58">        xl<span class="op" style="color: #5E5E5E;">-</span>xf</span>
<span id="cb37-59">    ])</span>
<span id="cb37-60">    </span>
<span id="cb37-61">    <span class="cf" style="color: #003B4F;">return</span> time_over_threshold</span></code></pre></div>
</details>
</div>
<p>Few test cases here below:</p>
<div class="cell" data-execution_count="405">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb38-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb38-3">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="405">
<pre><code>array([8.])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="406">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb40-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb40-3">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="406">
<pre><code>array([0.])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="407">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.5</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb42-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb42-3">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="407">
<pre><code>array([4.5])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="408">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb44-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb44-3">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="408">
<pre><code>array([5.66666667])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="409">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb46-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb46-3">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="409">
<pre><code>array([3.16666667])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="413">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb48-2">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">2.2</span></span>
<span id="cb48-3">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="413">
<pre><code>array([3.4])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="414">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([</span>
<span id="cb50-2">    [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb50-3">    [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb50-4">])</span>
<span id="cb50-5">threshold_test <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">2.2</span></span>
<span id="cb50-6">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="414">
<pre><code>array([3.13333333, 0.        ])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="343">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">waveform_test <span class="op" style="color: #5E5E5E;">=</span> np.array([</span>
<span id="cb52-2">    [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb52-3">    [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb52-4">])</span>
<span id="cb52-5">threshold_test <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">2.2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb52-6">compute_time_over_threshold(waveform_test, threshold_test)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="343">
<pre><code>array([3.13333333, 0.61904762])</code></pre>
</div>
</div>
</section>
</section>
<section id="why-i-needed-linear-interpolation" class="level1">
<h1>Why I needed linear interpolation</h1>
<p>The readout system I use to sample signal is poorly resoluted compared to the average time over threshold of the signals, so I wanted to have a linear interpolation to allow me to compute proper distributions of the time over threshold. This is possible thanks to the intrinsic time jitter of the digitizer which is of few order of magnitude lower than its sampling frequency.</p>
<p>For example, a digitizer can have a sampling frequency of 500 Ms/s but a time jitter (or time resolution) of 50 ps.</p>
<p>The two plots here below shows the difference between using the simple version of the time over threshold and the implemented one.</p>
<div class="cell" data-execution_count="512">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">n_waveforms, n_samples <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10_000</span>, <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb54-2">threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb54-3"><span class="co" style="color: #5E5E5E;"># Generated some fake data of 10_000 waveforms of 20 samples each</span></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;"># with values between -10 and 0</span></span>
<span id="cb54-5">x <span class="op" style="color: #5E5E5E;">=</span> np.tile(np.arange(n_samples), n_waveforms).reshape((n_waveforms, n_samples))</span>
<span id="cb54-6">noise <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(n_waveforms, n_samples) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb54-7">waveforms <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5.5</span> <span class="op" style="color: #5E5E5E;">*</span> (x<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>) <span class="op" style="color: #5E5E5E;">+</span> (x<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>  <span class="op" style="color: #5E5E5E;">+</span> noise</span>
<span id="cb54-8"></span>
<span id="cb54-9"><span class="co" style="color: #5E5E5E;"># Simple version of the time over threshold</span></span>
<span id="cb54-10">samples_below_threshold <span class="op" style="color: #5E5E5E;">=</span> waveforms <span class="op" style="color: #5E5E5E;">&lt;</span> threshold</span>
<span id="cb54-11">first_items <span class="op" style="color: #5E5E5E;">=</span> np.argmax(samples_below_threshold, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb54-12">last_items <span class="op" style="color: #5E5E5E;">=</span> waveforms.shape[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">-</span> np.argmax(samples_below_threshold[:, ::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb54-13">simple_tot <span class="op" style="color: #5E5E5E;">=</span> last_items <span class="op" style="color: #5E5E5E;">-</span> first_items</span>
<span id="cb54-14"><span class="co" style="color: #5E5E5E;"># Linearly interpolated version of the time over threshold</span></span>
<span id="cb54-15">interpolated_tot <span class="op" style="color: #5E5E5E;">=</span> compute_time_over_threshold(waveforms, threshold)</span>
<span id="cb54-16"></span>
<span id="cb54-17"><span class="co" style="color: #5E5E5E;"># Plot the two time over threshold distributions</span></span>
<span id="cb54-18">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb54-19">ax <span class="op" style="color: #5E5E5E;">=</span> axs[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb54-20">ax.plot(waveforms[:<span class="dv" style="color: #AD0000;">100</span>, :].T, linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.3</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb54-21">ax.<span class="bu" style="color: null;">set</span>(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Waveforms'</span>, xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Time samples'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ADC value'</span>)</span>
<span id="cb54-22"></span>
<span id="cb54-23">ax <span class="op" style="color: #5E5E5E;">=</span> axs[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb54-24">ax.hist(simple_tot, bins<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">1</span>), histtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'step'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Simple. Mean: </span><span class="sc" style="color: #5E5E5E;">{</span>simple_tot<span class="sc" style="color: #5E5E5E;">.</span>mean()<span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">'</span>, density<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb54-25">ax.hist(interpolated_tot, bins<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span>, histtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'step'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Interpolated. Mean: </span><span class="sc" style="color: #5E5E5E;">{</span>interpolated_tot<span class="sc" style="color: #5E5E5E;">.</span>mean()<span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">'</span>, density<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb54-26">ax.<span class="bu" style="color: null;">set</span>(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Time Over Threshold distribution'</span>, xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Time [ns]'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Normalized counts'</span>)</span>
<span id="cb54-27">ax.legend()</span>
<span id="cb54-28"></span>
<span id="cb54-29">fig.tight_layout()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/time-over-threshold-in-signals/index_files/figure-html/cell-31-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>It is easily visible that with a set of synthetic signals the time resolution computed with the simple sampling is different from the one computed with a linear interpolation.</p>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<p>In this post I have tried to calculate the time over threshold in the “classical” way, but also by linearly interpolating the threshold with the points of the sampled signal to achieve a better resolution. The 1-dimensional case is fairly straight forward, but the 2-dimensional case had me think a bit about the best way to implement the solution.</p>
<p>Perhaps there are better or easier ways to do this but I couldn’t find anything on the internet so I had to figure it out by myself. If anyone comes up with a cleaner or better solution I will update this poit.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>matplotlib</category>
  <category>scipy</category>
  <category>numpy</category>
  <category>signal processing</category>
  <category>signal analysis</category>
  <guid>https://grigolet.github.io/posts/time-over-threshold-in-signals/index.html</guid>
  <pubDate>Thu, 29 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://grigolet.github.io/posts/time-over-threshold-in-signals/graph.png" medium="image" type="image/png" height="66" width="144"/>
</item>
<item>
  <title>My matplotlib stylesheet</title>
  <link>https://grigolet.github.io/posts/my-matplotlib-stylesheet/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working on R&amp;D of gasesous detectors I tend to produce lots of plots for internal group discussions, conference presentations and publication publishing. Since most of these plots shows performance relative to gaseous detectors and since I am based at CERN I get to see lot of similar plots made by some other groups using <a href="https://root.cern.ch/">ROOT</a>, the de-facto standard analysis tool for high energy physics.</p>
<p>If I really have to be honest I have never liked ROOT so much, although I understand it provides several useful tools, from plotting data and fitting functions to GUI toolkits. Most, if not all the plots regarding the discovery of the Higgs boson were produced using ROOT. The layout of ROOT plots is then recognized and approved by the majority of the community in high energy physics.</p>
<p>If we have to compare a default plot made using root versus a default plot made with matplotlib, this would be the result</p>
<div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> ROOT <span class="im" style="color: #00769E;">as</span> rt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">321.0</span>, <span class="fl" style="color: #AD0000;">860.0</span>, <span class="fl" style="color: #AD0000;">777.0</span>, <span class="fl" style="color: #AD0000;">562.0</span>, <span class="fl" style="color: #AD0000;">374.0</span>, <span class="fl" style="color: #AD0000;">132.0</span>, <span class="fl" style="color: #AD0000;">816.0</span>, <span class="fl" style="color: #AD0000;">220.0</span>, <span class="fl" style="color: #AD0000;">253.0</span>])</span>
<span id="cb1-6">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">134.0</span>,<span class="fl" style="color: #AD0000;">307.0</span>,<span class="fl" style="color: #AD0000;">299.0</span>,<span class="fl" style="color: #AD0000;">213.0</span>,<span class="fl" style="color: #AD0000;">135.0</span>,<span class="fl" style="color: #AD0000;">50.0</span>,<span class="fl" style="color: #AD0000;">297.0</span>,<span class="fl" style="color: #AD0000;">85.0</span>,<span class="fl" style="color: #AD0000;">95.0</span>])</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Let's just make sure we are using the default settings now</span></span>
<span id="cb1-9">plt.style.use(<span class="st" style="color: #20794D;">'default'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># Matplotlib</span></span>
<span id="cb1-12">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb1-13">ax.<span class="bu" style="color: null;">set</span>(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Rate vs. Currents'</span>, xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Rate [Hz/cm$^2$]'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Currents [uA]'</span>)</span>
<span id="cb1-14">ax.plot(x, y, <span class="st" style="color: #20794D;">'.'</span>)</span>
<span id="cb1-15">ax.axhline(<span class="dv" style="color: #AD0000;">150</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># ROOT</span></span>
<span id="cb1-18">canvas <span class="op" style="color: #5E5E5E;">=</span> rt.TCanvas(<span class="st" style="color: #20794D;">"rate_vs_current"</span>, <span class="st" style="color: #20794D;">"Rate vs. Currents"</span>)</span>
<span id="cb1-19">graph <span class="op" style="color: #5E5E5E;">=</span> rt.TGraph(<span class="bu" style="color: null;">len</span>(x), x, y)</span>
<span id="cb1-20">graph.SetTitle(<span class="st" style="color: #20794D;">"Rate vs. Currents"</span>)</span>
<span id="cb1-21">graph.SetMarkerStyle(<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb1-22">graph.GetXaxis().SetTitle(<span class="st" style="color: #20794D;">"Rate [Hz/cm^</span><span class="sc" style="color: #5E5E5E;">{2}</span><span class="st" style="color: #20794D;">]"</span>)</span>
<span id="cb1-23">graph.GetYaxis().SetTitle(<span class="st" style="color: #20794D;">"Currents [uA]"</span>)</span>
<span id="cb1-24">line <span class="op" style="color: #5E5E5E;">=</span> rt.TLine(graph.GetXaxis().GetXmin(), <span class="dv" style="color: #AD0000;">150</span>, graph.GetXaxis().GetXmax(), <span class="dv" style="color: #AD0000;">150</span>)</span>
<span id="cb1-25">line.SetLineColor(rt.kRed)</span>
<span id="cb1-26">graph.Draw(<span class="st" style="color: #20794D;">'AP'</span>)</span>
<span id="cb1-27">line.Draw(<span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb1-28">canvas.Draw()</span></code></pre></div>
</details>
<div class="cell quarto-layout-panel" data-execution_count="14">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-default-matplotlib" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/my-matplotlib-stylesheet/index_files/figure-html/fig-default-matplotlib-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: Default matplotlib plot</figcaption><p></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-default-matplotlib" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/my-matplotlib-stylesheet/index_files/figure-html/fig-default-matplotlib-output-2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;2: Default ROOT plot</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="styling-matplotlib-plots" class="level1">
<h1>Styling matplotlib plots</h1>
<p>My goal here is to have the matplotlib plot to look a bit more like the ROOT one. I recently came to find that there is a python package called <a href="https://github.com/scikit-hep/mplhep">mplhep</a> that is aiming at producing ROOT-like style plots used in high energy physics. I found the package to be really helpful, especially when there is the need to add some labels regarding collaborations. However, in my particular case, I noticed that the default axes ticks, labels, spines layout were matching more matplotlib defaults than ROOT ones.</p>
<p>Before I came to know <code>mplhep</code> I decided to create my own <a href="https://matplotlib.org/stable/tutorials/introductory/customizing.html#matplotlibrc-sample">matplotlibrc</a> file, which, as the name may suggest, is a file containing defaults used to style matplotlib plots.</p>
<p>If you have a look at the default <code>matplotlibrc</code> content, you could see that it is organized in sections. Within each section you can find a set of defaults.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>default_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb2-1">...</span>
<span id="cb2-2">## Matplotlib configuration are currently divided into following parts:</span>
<span id="cb2-3">##     - BACKENDS</span>
<span id="cb2-4">##     - LINES</span>
<span id="cb2-5">##     - PATCHES</span>
<span id="cb2-6">##     - HATCHES</span>
<span id="cb2-7">##     - BOXPLOT</span>
<span id="cb2-8">##     - FONT</span>
<span id="cb2-9">##     - TEXT</span>
<span id="cb2-10">##     - LaTeX</span>
<span id="cb2-11">##     - AXES</span>
<span id="cb2-12">##     - DATES</span>
<span id="cb2-13">##     - TICKS</span>
<span id="cb2-14">##     - GRIDS</span>
<span id="cb2-15">##     - LEGEND</span>
<span id="cb2-16">##     - FIGURE</span>
<span id="cb2-17">##     - IMAGES</span>
<span id="cb2-18">##     - CONTOUR PLOTS</span>
<span id="cb2-19">##     - ERRORBAR PLOTS</span>
<span id="cb2-20">##     - HISTOGRAM PLOTS</span>
<span id="cb2-21">##     - SCATTER PLOTS</span>
<span id="cb2-22">##     - AGG RENDERING</span>
<span id="cb2-23">##     - PATHS</span>
<span id="cb2-24">##     - SAVING FIGURES</span>
<span id="cb2-25">##     - INTERACTIVE KEYMAPS</span>
<span id="cb2-26">##     - ANIMATION</span>
<span id="cb2-27">...</span></code></pre></div>
</div>
<p>I will detail the sections that I have modified to make plots look more like ROOT ones.</p>
<section id="lines" class="level2">
<h2 class="anchored" data-anchor-id="lines">LINES</h2>
<p>In the <code>LINES</code> section the only default value that I have changed is the <code>lines.linewidth</code> set to 0.5, instead of the 1.5 default value.</p>
</section>
<section id="patches" class="level2">
<h2 class="anchored" data-anchor-id="patches">PATCHES</h2>
<p>In the <code>PATCHES</code> section I have also decrease the <code>patch.linewidth</code> to 0.5</p>
</section>
<section id="font" class="level2">
<h2 class="anchored" data-anchor-id="font">FONT</h2>
<p>For the font I haven’t found any easy way to add a web font into matplotlib without adding some lines of code. For this reason I have installed GNU Free font and modified the order of the <code>sans-serif</code> font to be: <code>Helvetica, FreeSans, Nimbus Sans, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Avant Garde, sans-serif</code></p>
<p>In the <code>FONT</code> section I have set <code>font.weight</code> to <code>regular</code> by default.</p>
</section>
<section id="axes-and-axis" class="level2">
<h2 class="anchored" data-anchor-id="axes-and-axis">AXES and AXIS</h2>
<p>In the <code>AXES</code> and <code>AXIS</code> sections I tweaked multiple lines. I will report only the modified lines:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb3-1"># AXES</span>
<span id="cb3-2">axes.grid           : False   ## display grid or not</span>
<span id="cb3-3">axes.labelsize      : x-large  ## fontsize of the x any y labels</span>
<span id="cb3-4">axes.labelweight    : regular  ## weight of the x and y labels</span>
<span id="cb3-5">axes.formatter.useoffset      : False    ## If True, the tick label formatter</span>
<span id="cb3-6">axes.formatter.offset_threshold : 2     ## When useoffset is True, the offset</span>
<span id="cb3-7">...</span>
<span id="cb3-8"># AXIS</span>
<span id="cb3-9">xaxis.labellocation: right  # alignment of the xaxis label: {left, right, center}</span>
<span id="cb3-10">yaxis.labellocation: top  # alignment of the yaxis label: {bottom, top, center}</span></code></pre></div>
</div>
</section>
<section id="ticks" class="level2">
<h2 class="anchored" data-anchor-id="ticks">TICKS</h2>
<p>Matplotlib’s tick layout is what differs the most from ROOT default’s style. In this case the modified lines were the following:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb4-1">xtick.top            : True  ## draw ticks on the top side</span>
<span id="cb4-2">xtick.major.size     : 8    ## major tick size in points</span>
<span id="cb4-3">xtick.minor.size     : 4      ## minor tick size in points</span>
<span id="cb4-4">xtick.major.width    : 0.5    ## major tick width in points</span>
<span id="cb4-5">xtick.minor.width    : 0.5    ## minor tick width in points</span>
<span id="cb4-6">xtick.major.pad      : 6    ## distance to major tick label in points</span>
<span id="cb4-7">xtick.direction      : in    ## direction: in, out, or inout</span>
<span id="cb4-8">xtick.minor.visible  : True  ## visibility of minor ticks on x-axis</span>
<span id="cb4-9">ytick.right          : True   ## draw ticks on the right side</span>
<span id="cb4-10">ytick.major.size     : 8      ## major tick size in points</span>
<span id="cb4-11">ytick.minor.size     : 4      ## minor tick size in points</span>
<span id="cb4-12">ytick.major.width    : 0.5    ## major tick width in points</span>
<span id="cb4-13">ytick.minor.width    : 0.5    ## minor tick width in points</span>
<span id="cb4-14">ytick.major.pad      : 6    ## distance to major tick label in points</span>
<span id="cb4-15">ytick.direction      : in     ## direction: in, out, or inout</span>
<span id="cb4-16">ytick.minor.visible  : True  ## visibility of minor ticks on y-axis</span></code></pre></div>
</div>
</section>
<section id="grid" class="level2">
<h2 class="anchored" data-anchor-id="grid">GRID</h2>
<p>Although I used to love grid, they might make the plot a bit “heavy” to read when there are several points and lines. For this reason I kept grids disabled:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb5-1">grid.color       :   k    ## black</span>
<span id="cb5-2">grid.linestyle   :   --         ## dashed</span>
<span id="cb5-3">grid.linewidth   :   0.5       ## in points</span></code></pre></div>
</div>
</section>
<section id="legend" class="level2">
<h2 class="anchored" data-anchor-id="legend">LEGEND</h2>
<p>Regardin the legend handling I got some inspirations by having a look at some common plots used within the community I am working with:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb6-1">legend.frameon       : True     ## if True, draw the legend on a background patch</span>
<span id="cb6-2">legend.framealpha    : None      ## legend patch transparency</span>
<span id="cb6-3">legend.edgecolor     : inherit      ## background patch boundary color</span>
<span id="cb6-4">legend.fancybox      : False     ## if True, use a rounded box for the</span>
<span id="cb6-5">                                 ## legend background, else a rectangle</span>
<span id="cb6-6">legend.scatterpoints : 3        ## number of scatter points</span>
<span id="cb6-7">legend.fontsize      : large</span>
<span id="cb6-8">legend.handlelength  : 0.7      ## the length of the legend lines</span>
<span id="cb6-9">legend.handleheight  : 1      ## the height of the legend handle</span>
<span id="cb6-10">legend.handletextpad : 1.2      ## the space between the legend line and legend text</span>
<span id="cb6-11">legend.borderaxespad : 1      ## the border between the axes and legend edge</span></code></pre></div>
</div>
</section>
<section id="figure" class="level2">
<h2 class="anchored" data-anchor-id="figure">FIGURE</h2>
<p>Although there are really no standard on the figure sizes I like a default 3:2 ratio and a minimum DPI of 300:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb7-1">figure.figsize   : 6, 4       ## figure size in inches</span>
<span id="cb7-2">figure.dpi       : 300        ## figure dots per inch</span></code></pre></div>
</div>
</section>
<section id="other-tweakings" class="level2">
<h2 class="anchored" data-anchor-id="other-tweakings">Other tweakings</h2>
<p>I have set the cap size of the error bars, as by default is 0 and set the histogram binning to <code>"auto"</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_matplotlibrc.txt</strong></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb8-1">errorbar.capsize : 1.5            ## length of end cap on error bars in pixels</span>
<span id="cb8-2">hist.bins : auto                 ## The default number of histogram bins.</span>
<span id="cb8-3">                                  ## If Numpy 1.11 or later is</span>
<span id="cb8-4">                                  ## installed, may also be `auto`</span></code></pre></div>
</div>
</section>
</section>
<section id="final-results" class="level1">
<h1>Final results</h1>
<p>If I try to make again the plot in Figure Figure&nbsp;2 with these new defaults and put it side by side to a ROOT plot I get something like this:</p>
<div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb9-2"><span class="im" style="color: #00769E;">import</span> ROOT <span class="im" style="color: #00769E;">as</span> rt</span>
<span id="cb9-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb9-4"></span>
<span id="cb9-5">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">321.0</span>, <span class="fl" style="color: #AD0000;">860.0</span>, <span class="fl" style="color: #AD0000;">777.0</span>, <span class="fl" style="color: #AD0000;">562.0</span>, <span class="fl" style="color: #AD0000;">374.0</span>, <span class="fl" style="color: #AD0000;">132.0</span>, <span class="fl" style="color: #AD0000;">816.0</span>, <span class="fl" style="color: #AD0000;">220.0</span>, <span class="fl" style="color: #AD0000;">253.0</span>])</span>
<span id="cb9-6">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">134.0</span>,<span class="fl" style="color: #AD0000;">307.0</span>,<span class="fl" style="color: #AD0000;">299.0</span>,<span class="fl" style="color: #AD0000;">213.0</span>,<span class="fl" style="color: #AD0000;">135.0</span>,<span class="fl" style="color: #AD0000;">50.0</span>,<span class="fl" style="color: #AD0000;">297.0</span>,<span class="fl" style="color: #AD0000;">85.0</span>,<span class="fl" style="color: #AD0000;">95.0</span>])</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;"># Use a context manager to plot only this plot with newer values</span></span>
<span id="cb9-9">plt.style.use(<span class="st" style="color: #20794D;">'https://gitlab.cern.ch/-/snippets/2223/raw/master/rpcecogas.mplstyle'</span>)</span>
<span id="cb9-10">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb9-11">ax.<span class="bu" style="color: null;">set</span>(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Rate vs. Currents'</span>, xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Rate [Hz/cm$^2$]'</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Currents [uA]'</span>)</span>
<span id="cb9-12">ax.plot(x, y, <span class="st" style="color: #20794D;">'.'</span>)</span>
<span id="cb9-13">ax.axhline(<span class="dv" style="color: #AD0000;">150</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>)</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;"># ROOT</span></span>
<span id="cb9-16">canvas <span class="op" style="color: #5E5E5E;">=</span> rt.TCanvas(<span class="st" style="color: #20794D;">"rate_vs_current"</span>, <span class="st" style="color: #20794D;">"Rate vs. Currents"</span>)</span>
<span id="cb9-17">graph <span class="op" style="color: #5E5E5E;">=</span> rt.TGraph(<span class="bu" style="color: null;">len</span>(x), x, y)</span>
<span id="cb9-18">graph.SetTitle(<span class="st" style="color: #20794D;">"Rate vs. Currents"</span>)</span>
<span id="cb9-19">graph.SetMarkerStyle(<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb9-20">graph.GetXaxis().SetTitle(<span class="st" style="color: #20794D;">"Rate [Hz/cm^</span><span class="sc" style="color: #5E5E5E;">{2}</span><span class="st" style="color: #20794D;">]"</span>)</span>
<span id="cb9-21">graph.GetYaxis().SetTitle(<span class="st" style="color: #20794D;">"Currents [uA]"</span>)</span>
<span id="cb9-22">line <span class="op" style="color: #5E5E5E;">=</span> rt.TLine(graph.GetXaxis().GetXmin(), <span class="dv" style="color: #AD0000;">150</span>, graph.GetXaxis().GetXmax(), <span class="dv" style="color: #AD0000;">150</span>)</span>
<span id="cb9-23">line.SetLineColor(rt.kRed)</span>
<span id="cb9-24">graph.Draw(<span class="st" style="color: #20794D;">'AP'</span>)</span>
<span id="cb9-25">line.Draw(<span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb9-26">canvas.Draw()</span></code></pre></div>
</details>
<div class="cell quarto-layout-panel" data-execution_count="15">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-new-default-matplotlib" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/my-matplotlib-stylesheet/index_files/figure-html/fig-new-default-matplotlib-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: Custom matplotlib plot</figcaption><p></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-new-default-matplotlib" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/my-matplotlib-stylesheet/index_files/figure-html/fig-new-default-matplotlib-output-2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;4: Default ROOT plot</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>As you can notice in Figure&nbsp;4, the plots look similar. I have left a bigger x and y label titles for better readability and I have left the default <code>tab10</code> matplotlib palette for colors, as I don’t like the palette handling in ROOT.</p>
<p>You can find the stylesheet I am currently using available as a gitlab snippet here: https://gitlab.cern.ch/-/snippets/2223 There are couple of ways to use a stylesheet. The first, that applies globally, is to use <code>plt.style.use(url)</code>. The second instead, could be using a context manager provided by matplotlib that allows to apply styles on a plot within the context manager itself. For more information, see the <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.rc_context.html">matplotlib documentation on <code>rc_context</code></a> There is only one caveat that I noticed when writing this post: if I use <code>rc_context</code> then I have some issues loading the system’s font and the plot will fallback to some defaults fonts. I don’t know if this is a matplotlib bug or if it is related to my local machine. I will have to investigate</p>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<p>In this post I highlighted the matplotlib configuration I changed to have default plots looking more like ROOT. I am making a heavy use of these styles and I have observed that very few people notice that difference between a ROOT like plot and one made with these defaults.</p>
<p>In the future I plan to revise a little bit the configuration to further improve the layout.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>matplotlib</category>
  <category>plot</category>
  <category>visualization</category>
  <category>style</category>
  <guid>https://grigolet.github.io/posts/my-matplotlib-stylesheet/index.html</guid>
  <pubDate>Sat, 17 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://grigolet.github.io/posts/my-matplotlib-stylesheet/preview.png" medium="image" type="image/png" height="106" width="144"/>
</item>
<item>
  <title>Multiple Y axes with matplotlib</title>
  <link>https://grigolet.github.io/posts/plots-with-multiple-y-axes/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with gas systems I make intense use of the <a href="https://www.winccoa.com/documentation/WinCCOA/3.18/en_US/GettingStarted/GettingStarted-60.html">WinCC-OA trending tool</a>, which allows to plot up to 8 time series on the same panel. Each time series tpyically corresponds to the value read by a sensor of a plant so it may have different units and range. The trending tool allows to have multiple Y axes on the left side which can be adjusted in terms of range and offset.</p>
<p>I find this feature particularly helpful, especially when there is the need to quickly and explore and correlate readings of sensor from different parts of the plant</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/example_unicos.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">WinCC-OA/UNICOS trending tool</figcaption><p></p>
</figure>
</div>
<p>Tools like matplotlib and plotly make it easy to work with multiple series plotted on the same data but I found a bit cumbersome trying to visualize data having different scales on the same plot.</p>
</section>
<section id="the-problem-of-visualizing-many-series" class="level1">
<h1>The problem of visualizing many series</h1>
<p>Assuming we have a very simple set of <img src="https://latex.codecogs.com/png.latex?(x,%20y_n)"> series a simple plot with matplotlib may look like this:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> random <span class="im" style="color: #00769E;">as</span> rnd</span>
<span id="cb1-3"></span>
<span id="cb1-4">x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb1-5">y1 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-6">y2 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-7">y3 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">20</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-8">y4 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-9"></span>
<span id="cb1-10">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb1-11"><span class="cf" style="color: #003B4F;">for</span> y <span class="kw" style="color: #003B4F;">in</span> [y1, y2, y3, y4]:</span>
<span id="cb1-12">    ax.plot(x, y, <span class="st" style="color: #20794D;">'.-'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-multiple-series-same-plot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/fig-multiple-series-same-plot-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: A matplotlib plot with four series plotted together.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Note that in Figure Figure&nbsp;1 each time series has a different standard deviation, thus different ranges may be needed. This is often easily accomplished by plotting each series in a different subplots. However, subplots make it more difficult to visually compare and align series, especially when time-based. For example, see subplots here:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb2-2">y1 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-3">y2 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">33</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-4">y3 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">20</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">20</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">30</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-5">y4 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">27</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">180</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-6"></span>
<span id="cb2-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;">for</span> y <span class="kw" style="color: #003B4F;">in</span> [y1, y2, y3, y4]:</span>
<span id="cb2-9">    ax.plot(x, y, <span class="st" style="color: #20794D;">'.-'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Multiple series with an offset at arbitrary x.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Here I have added an offset to each series. Two series, <code>y1</code> and <code>y3</code> have a change point at the same index, while the other two have a change point at slightly different <code>x</code>s. We could plot each series in a subplots, perhaps vertically stacked:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">series <span class="op" style="color: #5E5E5E;">=</span> [y1, y2, y3, y4]</span>
<span id="cb3-2">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="bu" style="color: null;">len</span>(series), <span class="dv" style="color: #AD0000;">1</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(series)))</span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;">for</span> ix, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(series):</span>
<span id="cb3-4">    ax <span class="op" style="color: #5E5E5E;">=</span> axs.flat[ix]</span>
<span id="cb3-5">    ax.plot(x, y, <span class="st" style="color: #20794D;">'.-'</span>)</span>
<span id="cb3-6">    ax.set_title(<span class="ss" style="color: #20794D;">f'y</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-multiple-series-multiple-plots" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/fig-multiple-series-multiple-plots-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;2: Series plotted on different subplots.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>In figure Figure&nbsp;2 you can see that each series as an offset when adding a proper range on the y axis. However, it is still a bit difficult to understand the real indexes of the offset. I would like to understand which come first and which comes later.</p>
</section>
<section id="adding-multiple-y-axes-to-matplotlib-plots" class="level1">
<h1>Adding multiple Y axes to matplotlib plots</h1>
<p>We can starting adding multiple axes by taking inspiration from the Matplotib documentation using <a href="https://matplotlib.org/stable/gallery/spines/multiple_yaxis_with_spines.html">spines</a>, <a href="https://matplotlib.org/stable/gallery/axisartist/demo_parasite_axes.html">Parasite Axes</a> and another <a href="https://matplotlib.org/stable/gallery/axisartist/demo_parasite_axes2.html">Parasite axis</a> demo.</p>
<p>The idea is to use <code>ax.twinx()</code> to create an additional axes. As the <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.twinx.html#matplotlib.axes.Axes.twinx">documentation says</a>, &gt; Create a new Axes with an invisible x-axis and an independent y-axis positioned opposite to the original one (i.e.&nbsp;at right).</p>
<p>Although <code>twinx()</code> is used to create a secondary axis on the right position I could use it to create a secondary axis and leave the spines of the axis only on the left. I can use <code>set_position()</code> on the spines object to shift the spines on left:</p>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">fig, ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb4-2">ax2 <span class="op" style="color: #5E5E5E;">=</span> ax1.twinx()</span>
<span id="cb4-3">ax3 <span class="op" style="color: #5E5E5E;">=</span> ax1.twinx()</span>
<span id="cb4-4">ax4 <span class="op" style="color: #5E5E5E;">=</span> ax1.twinx()</span>
<span id="cb4-5">axs <span class="op" style="color: #5E5E5E;">=</span> [ax1, ax2, ax3, ax4]</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;">for</span> ix, (ax, y) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="bu" style="color: null;">zip</span>(axs, series)):</span>
<span id="cb4-8">    ax.plot(x, y, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'y</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb4-9">ax.legend()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-single-plot-bare-twinx" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/fig-single-plot-bare-twinx-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: Single plot with multiple series and secondary axes.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>As you can see in Figure Figure&nbsp;3 we can understand the index at which each change point of the series is happening. The only issue is that the y axes on the right are overlapping between each other.</p>
<p>My goal is to have these secondary y-axes on the left for easier reading. Actually, if you inspect the source of how <code>twinx()</code> is defined, it calls <code>Axes._make_twin_axes()</code> and sets later the tick position on the right using <code>YAxis.tick_right()</code> and <code>YAxis.set_label_position('right')</code>. It would be nice if <code>twinx()</code> would not assume that we want the axes to the right and instead allowed to pass a parameter which decised the position.</p>
<p>Here below I leave a minimum working example I could think of:</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;">for</span> ix, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(series):</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;"># If we have to plot the first series we use </span></span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;"># The axes created by plt.subplots() earlier</span></span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;">if</span> ix <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb5-6">        ax <span class="op" style="color: #5E5E5E;">=</span> axes</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-8">        <span class="co" style="color: #5E5E5E;"># It's not the first series: we need to</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;"># create a twin axes</span></span>
<span id="cb5-10">        ax <span class="op" style="color: #5E5E5E;">=</span> axes.twinx()</span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;"># Set the ticks of the axis to the left</span></span>
<span id="cb5-12">    ax.yaxis.tick_left()</span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;"># Set the labels of the axes to the lef</span></span>
<span id="cb5-14">    ax.yaxis.set_label_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb5-15">    ax.yaxis.set_offset_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;"># Offset the position of he ticks and labels</span></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;"># by some % of the axes avoid overlapping of axes</span></span>
<span id="cb5-18">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_position((<span class="st" style="color: #20794D;">'outward'</span>, <span class="dv" style="color: #AD0000;">40</span> <span class="op" style="color: #5E5E5E;">*</span> ix))</span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Plot the actual data</span></span>
<span id="cb5-20">    ax.plot(x, y, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb5-21">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_color(<span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb5-22">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, colors<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Et voilà, here I have a plot similar to the WinCC-OA one. I could improve the plot a bit by using the same number of ticks for each axes. I would do this using the <code>LinearLocator</code> class:</p>
<div class="cell" data-execution_count="59">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> matplotlib.ticker <span class="im" style="color: #00769E;">as</span> mt</span>
<span id="cb6-2"></span>
<span id="cb6-3">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">for</span> ix, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(series):</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;"># If we have to plot the first series we use </span></span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;"># The axes created by plt.subplots() earlier</span></span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;">if</span> ix <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb6-8">        ax <span class="op" style="color: #5E5E5E;">=</span> axes</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-10">        <span class="co" style="color: #5E5E5E;"># It's not the first series: we need to</span></span>
<span id="cb6-11">        <span class="co" style="color: #5E5E5E;"># create a twin axes</span></span>
<span id="cb6-12">        ax <span class="op" style="color: #5E5E5E;">=</span> axes.twinx()</span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;"># Set the ticks of the axis to the left</span></span>
<span id="cb6-14">    ax.yaxis.tick_left()</span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># Set the labels of the axes to the left</span></span>
<span id="cb6-16">    ax.yaxis.set_label_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb6-17">    ax.yaxis.set_offset_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;"># Offset the position of he ticks and labels</span></span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;"># by some % of the axes avoid overlapping of axes</span></span>
<span id="cb6-20">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_position((<span class="st" style="color: #20794D;">'outward'</span>, <span class="dv" style="color: #AD0000;">40</span> <span class="op" style="color: #5E5E5E;">*</span> ix))</span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;"># Plot the actual data</span></span>
<span id="cb6-22">    ax.plot(x, y, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-23">    <span class="co" style="color: #5E5E5E;"># Set the colors of the ticks, labels and spines to be</span></span>
<span id="cb6-24">    <span class="co" style="color: #5E5E5E;"># the same of the associated series</span></span>
<span id="cb6-25">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_color(<span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-26">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, colors<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;"># Use a tick locator to have the same number of ticks</span></span>
<span id="cb6-28">    ax.yaxis.set_major_locator(mt.LinearLocator(<span class="dv" style="color: #AD0000;">11</span>))</span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;"># And format the labels to have only one digit after the decimals</span></span>
<span id="cb6-30">    ax.yaxis.set_major_formatter(mt.StrMethodFormatter(<span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{x:.1f}</span><span class="st" style="color: #20794D;">'</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<p>I find very useful for myself to provide a minimal example of having a plot with multiple axes, though a final plot may require more subtle adjustements. Keypoints to have multiple y axes:</p>
<ul>
<li>Use <code>twinx()</code> to create an additional axis</li>
<li>Set ticks, labels and offest positions to the right: <code>ax.yaxis.tick_left()</code>, <code>ax.yaxis.set_label_position('left')</code>, <code>ax.yaxis.set_offset_position('left')</code></li>
<li>Adjust the offset of the spines to the left using points, percentage or data coordinate. In the case of points: <code>ax.spines['left'].set_position()</code></li>
<li>Change spines, tick and label colors to the same of the series for better readability: <code>ax.spines['left'].set_color(color)</code>, <code>ax.tick_params(axis='y', colors=color)</code></li>
<li>Optionally adjust the number of ticks to be the same for all the axes: use a <code>LinearLocator</code> class with a fixed number of points</li>
</ul>


</section>

 ]]></description>
  <category>python</category>
  <category>matplotlib</category>
  <category>plot</category>
  <category>visualization</category>
  <guid>https://grigolet.github.io/posts/plots-with-multiple-y-axes/index.html</guid>
  <pubDate>Wed, 07 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://grigolet.github.io/posts/plots-with-multiple-y-axes/preview.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>A post made from a jupyter notebook</title>
  <dc:creator>Gianluca Rigoletti</dc:creator>
  <link>https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index.html</link>
  <description><![CDATA[ 




<p>Few days ago I found <a href="https://quarto.org">Quarto</a>. I understood it is an authoring framework based on pandoc and that has full support of jupyter notebooks as input files. Since lot of work I carry on at the moment makes a heavy use of jupyter notebook I decided to try Quarto and use it for two main purposes: the first is as a replacement of <code>jupyter nbconvert</code> that I have intensively used to convert notebooks to html pages.</p>
<p>I saw that Quarto provides much more flexibility on the layout of the text, images and code, which was exactly what I was looking for. The second way I intend to use Quarto is to publish the present content. At the time of writing, this post is written on an <code>index.ipynb</code> file in my local computer using Visual Studio code. I find extremely pleasant to write mixed content and have a tool that transforms it in a post page of a blog website.</p>
<p>I will showcase here all the features that I have personally found relevant for the posts I am going to write as well, hoping that this post serves as a quick reference (together with the <a href="https://quarto.org/docs/guide/">Quarto user guide</a>).</p>
<section id="code-cells" class="level2">
<h2 class="anchored" data-anchor-id="code-cells">Code cells</h2>
<p>Code cells are pretty straightforward: I just have to write code in a cell and it will be executed and the output eventually frozen by Quarto. I found the <a href="https://quarto.org/docs/projects/code-execution.html#freeze">freeze option</a> particularly useful and I set it to <code>auto</code> at the time of writing. In this way, the notebooks will be re-rendered only if the source code changes.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd </span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<p>At the very base you can just enter some code and save it. If you are using <code>quarto preview</code> the jupyter notebook is executed when it saved (and not when a code cell is executed, but this depends on the saving options of jupyter).</p>
<p>For instance, we can write some code and let it display some output like this:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> TestClass:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, params) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-3">        <span class="va" style="color: #111111;">self</span>.attributes <span class="op" style="color: #5E5E5E;">=</span> params</span>
<span id="cb2-4">    </span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;">def</span> increment(<span class="va" style="color: #111111;">self</span>, param: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;">return</span> param <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">obj <span class="op" style="color: #5E5E5E;">=</span> TestClass(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb2-9">obj.increment(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>11</code></pre>
</div>
</div>
<p>Sometimes a cell may contain lot of code that makes it difficult for the reader to keep track of the text. In this case folding the code is very helpful and only requires a special comment to be added at the beginning of the code cell:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">#| code-fold: true</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">class</span> TestClass:</span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, params) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-5">        <span class="va" style="color: #111111;">self</span>.attributes <span class="op" style="color: #5E5E5E;">=</span> params</span>
<span id="cb4-6">    </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;">def</span> increment(<span class="va" style="color: #111111;">self</span>, param: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;">return</span> param <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">obj <span class="op" style="color: #5E5E5E;">=</span> TestClass(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb4-11">obj.increment(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<p>Here below the result of the previous snippet of code:</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">class</span> TestClass:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, params) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-3">        <span class="va" style="color: #111111;">self</span>.attributes <span class="op" style="color: #5E5E5E;">=</span> params</span>
<span id="cb5-4">    </span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;">def</span> increment(<span class="va" style="color: #111111;">self</span>, param: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;">return</span> param <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-7"></span>
<span id="cb5-8">obj <span class="op" style="color: #5E5E5E;">=</span> TestClass(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb5-9">obj.increment(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>11</code></pre>
</div>
</div>
<p>Note that the output of the cell is not folded. This is particularly useful if you have lot of code printing out a plot for example: the code will be folded but the plot will be visible anyway.</p>
<p>Some other time I wish to completely hide the code while keeping the output visible. In this case the option <code>echo: false</code> does the job:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">#| echo: false</span></span>
<span id="cb7-2">plt.plot([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>], [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>], <span class="st" style="color: #20794D;">'ro'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p>Here below the result of the previous snippet of code:</p>
<div class="cell" data-execution_count="4">
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Code cells can be also assigned a file name. This is particularly helpful when there is a post that needs to tackle code among several files. As an example you can have something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">#| filename: test.py</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">class</span> A:</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
<p>And this would be rendered to:</p>
<div class="cell" data-execution_count="5">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>test.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">class</span> A:</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
</div>
</div>
</section>
<section id="controlling-figures-layout" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="controlling-figures-layout">Controlling figures layout</h2>
<p>I find particularly useful the way Quarto helps treating outputs for code cells, especially laying out figures resulting from a code output. Often times I have big plots that I would like to take all the available horizontal space in the page. In this case I can use <code>#| column: page</code> together with on the code cell</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">#| column: page</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">#| fig-align: center</span></span>
<span id="cb10-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">5</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">150</span>)</span>
<span id="cb10-4">ax.plot(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>), [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">31</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell page-columns page-full" data-execution_count="7">
<div class="cell-output cell-output-display column-page">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>There is also support for custom layouts when multiple plots are produced. I typically use matplotlib APIs to lay out multiple plots but this features could be useful for images in general and sometimes with libraries where the layout support for subplots is not straightforward. As an example see this snippet:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">#| layout-ncol: 2</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb11-4">ax.plot([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>], [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>], <span class="st" style="color: #20794D;">'ro-'</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">fig2, ax2 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb11-7">ax2.plot([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>], [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">32</span>], <span class="st" style="color: #20794D;">'b*--'</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel" data-execution_count="23">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>There are several more features that I think I will be using throughout my journey on this blog. There are also some features related to publications that I want to explore as I would like to understand if I can have some publications ready LaTeX documents from jupyter notebooks</p>
<p>I found Quarto really easy to use and <a href="https://quarto.org/docs/guide/">the documentation</a> is fairly straightforward to follow. I hope to post more interesting findings and customization as I will use it :)</p>


</section>

 ]]></description>
  <category>jupyter</category>
  <category>notebook</category>
  <category>python</category>
  <category>quarto</category>
  <guid>https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index.html</guid>
  <pubDate>Tue, 06 Sep 2022 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
