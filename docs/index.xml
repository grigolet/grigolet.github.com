<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>G.R.'s Blog</title>
<link>https://grigolet.github.io/index.html</link>
<atom:link href="https://grigolet.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog about data analysis, visualization and sometimes cooking.</description>
<image>
<url>https://grigolet.github.io/about.png</url>
<title>G.R.'s Blog</title>
<link>https://grigolet.github.io/index.html</link>
</image>
<generator>quarto-1.1</generator>
<lastBuildDate>Wed, 07 Sep 2022 22:00:00 GMT</lastBuildDate>
<item>
  <title>Multiple Y axes with matplotlib</title>
  <link>https://grigolet.github.io/posts/plots-with-multiple-y-axes/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with gas systems I make intense use of the <a href="https://www.winccoa.com/documentation/WinCCOA/3.18/en_US/GettingStarted/GettingStarted-60.html">WinCC-OA trending tool</a>, which allows to plot up to 8 time series on the same panel. Each time series tpyically corresponds to the value read by a sensor of a plant so it may have different units and range. The trending tool allows to have multiple Y axes on the left side which can be adjusted in terms of range and offset.</p>
<p>I find this feature particularly helpful, especially when there is the need to quickly and explore and correlate readings of sensor from different parts of the plant</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/example_unicos.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">WinCC-OA/UNICOS trending tool</figcaption><p></p>
</figure>
</div>
<p>Tools like matplotlib and plotly make it easy to work with multiple series plotted on the same data but I found a bit cumbersome trying to visualize data having different scales on the same plot.</p>
</section>
<section id="the-problem-of-visualizing-many-series" class="level1">
<h1>The problem of visualizing many series</h1>
<p>Assuming we have a very simple set of <img src="https://latex.codecogs.com/png.latex?(x,%20y_n)"> series a simple plot with matplotlib may look like this:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> random <span class="im" style="color: #00769E;">as</span> rnd</span>
<span id="cb1-3"></span>
<span id="cb1-4">x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb1-5">y1 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-6">y2 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-7">y3 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">20</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-8">y4 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb1-9"></span>
<span id="cb1-10">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb1-11"><span class="cf" style="color: #003B4F;">for</span> y <span class="kw" style="color: #003B4F;">in</span> [y1, y2, y3, y4]:</span>
<span id="cb1-12">    ax.plot(x, y, <span class="st" style="color: #20794D;">'.-'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-multiple-series-same-plot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/fig-multiple-series-same-plot-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: A matplotlib plot with four series plotted together.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Note that in Figure Figure&nbsp;1 each time series has a different standard deviation, thus different ranges may be needed. This is often easily accomplished by plotting each series in a different subplots. However, subplots make it more difficult to visually compare and align series, especially when time-based. For example, see subplots here:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb2-2">y1 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-3">y2 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">33</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-4">y3 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">20</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">20</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">30</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-5">y4 <span class="op" style="color: #5E5E5E;">=</span> [rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">27</span> <span class="cf" style="color: #003B4F;">else</span> rnd.random() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">180</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> x]</span>
<span id="cb2-6"></span>
<span id="cb2-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;">for</span> y <span class="kw" style="color: #003B4F;">in</span> [y1, y2, y3, y4]:</span>
<span id="cb2-9">    ax.plot(x, y, <span class="st" style="color: #20794D;">'.-'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Multiple series with an offset at arbitrary x.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Here I have added an offset to each series. Two series, <code>y1</code> and <code>y3</code> have a change point at the same index, while the other two have a change point at slightly different <code>x</code>s. We could plot each series in a subplots, perhaps vertically stacked:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">series <span class="op" style="color: #5E5E5E;">=</span> [y1, y2, y3, y4]</span>
<span id="cb3-2">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="bu" style="color: null;">len</span>(series), <span class="dv" style="color: #AD0000;">1</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(series)))</span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;">for</span> ix, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(series):</span>
<span id="cb3-4">    ax <span class="op" style="color: #5E5E5E;">=</span> axs.flat[ix]</span>
<span id="cb3-5">    ax.plot(x, y, <span class="st" style="color: #20794D;">'.-'</span>)</span>
<span id="cb3-6">    ax.set_title(<span class="ss" style="color: #20794D;">f'y</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-multiple-series-multiple-plots" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/fig-multiple-series-multiple-plots-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;2: Series plotted on different subplots.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>In figure Figure&nbsp;2 you can see that each series as an offset when adding a proper range on the y axis. However, it is still a bit difficult to understand the real indexes of the offset. I would like to understand which come first and which comes later.</p>
</section>
<section id="adding-multiple-y-axes-to-matplotlib-plots" class="level1">
<h1>Adding multiple Y axes to matplotlib plots</h1>
<p>We can starting adding multiple axes by taking inspiration from the Matplotib documentation using <a href="https://matplotlib.org/stable/gallery/spines/multiple_yaxis_with_spines.html">spines</a>, <a href="https://matplotlib.org/stable/gallery/axisartist/demo_parasite_axes.html">Parasite Axes</a> and another <a href="https://matplotlib.org/stable/gallery/axisartist/demo_parasite_axes2.html">Parasite axis</a> demo.</p>
<p>The idea is to use <code>ax.twinx()</code> to create an additional axes. As the <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.twinx.html#matplotlib.axes.Axes.twinx">documentation says</a>, &gt; Create a new Axes with an invisible x-axis and an independent y-axis positioned opposite to the original one (i.e.&nbsp;at right).</p>
<p>Although <code>twinx()</code> is used to create a secondary axis on the right position I could use it to create a secondary axis and leave the spines of the axis only on the left. I can use <code>set_position()</code> on the spines object to shift the spines on left:</p>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">fig, ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb4-2">ax2 <span class="op" style="color: #5E5E5E;">=</span> ax1.twinx()</span>
<span id="cb4-3">ax3 <span class="op" style="color: #5E5E5E;">=</span> ax1.twinx()</span>
<span id="cb4-4">ax4 <span class="op" style="color: #5E5E5E;">=</span> ax1.twinx()</span>
<span id="cb4-5">axs <span class="op" style="color: #5E5E5E;">=</span> [ax1, ax2, ax3, ax4]</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;">for</span> ix, (ax, y) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="bu" style="color: null;">zip</span>(axs, series)):</span>
<span id="cb4-8">    ax.plot(x, y, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'y</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb4-9">ax.legend()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-single-plot-bare-twinx" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/fig-single-plot-bare-twinx-output-1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: Single plot with multiple series and secondary axes.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>As you can see in Figure Figure&nbsp;3 we can understand the index at which each change point of the series is happening. The only issue is that the y axes on the right are overlapping between each other.</p>
<p>My goal is to have these secondary y-axes on the left for easier reading. Actually, if you inspect the source of how <code>twinx()</code> is defined, it calls <code>Axes._make_twin_axes()</code> and sets later the tick position on the right using <code>YAxis.tick_right()</code> and <code>YAxis.set_label_position('right')</code>. It would be nice if <code>twinx()</code> would not assume that we want the axes to the right and instead allowed to pass a parameter which decised the position.</p>
<p>Here below I leave a minimum working example I could think of:</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;">for</span> ix, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(series):</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;"># If we have to plot the first series we use </span></span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;"># The axes created by plt.subplots() earlier</span></span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;">if</span> ix <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb5-6">        ax <span class="op" style="color: #5E5E5E;">=</span> axes</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-8">        <span class="co" style="color: #5E5E5E;"># It's not the first series: we need to</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;"># create a twin axes</span></span>
<span id="cb5-10">        ax <span class="op" style="color: #5E5E5E;">=</span> axes.twinx()</span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;"># Set the ticks of the axis to the left</span></span>
<span id="cb5-12">    ax.yaxis.tick_left()</span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;"># Set the labels of the axes to the lef</span></span>
<span id="cb5-14">    ax.yaxis.set_label_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb5-15">    ax.yaxis.set_offset_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;"># Offset the position of he ticks and labels</span></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;"># by some % of the axes avoid overlapping of axes</span></span>
<span id="cb5-18">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_position((<span class="st" style="color: #20794D;">'outward'</span>, <span class="dv" style="color: #AD0000;">40</span> <span class="op" style="color: #5E5E5E;">*</span> ix))</span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Plot the actual data</span></span>
<span id="cb5-20">    ax.plot(x, y, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb5-21">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_color(<span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb5-22">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, colors<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Et voilà, here I have a plot similar to the WinCC-OA one. I could improve the plot a bit by using the same number of ticks for each axes. I would do this using the <code>LinearLocator</code> class:</p>
<div class="cell" data-execution_count="59">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> matplotlib.ticker <span class="im" style="color: #00769E;">as</span> mt</span>
<span id="cb6-2"></span>
<span id="cb6-3">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">for</span> ix, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(series):</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;"># If we have to plot the first series we use </span></span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;"># The axes created by plt.subplots() earlier</span></span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;">if</span> ix <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb6-8">        ax <span class="op" style="color: #5E5E5E;">=</span> axes</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-10">        <span class="co" style="color: #5E5E5E;"># It's not the first series: we need to</span></span>
<span id="cb6-11">        <span class="co" style="color: #5E5E5E;"># create a twin axes</span></span>
<span id="cb6-12">        ax <span class="op" style="color: #5E5E5E;">=</span> axes.twinx()</span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;"># Set the ticks of the axis to the left</span></span>
<span id="cb6-14">    ax.yaxis.tick_left()</span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># Set the labels of the axes to the left</span></span>
<span id="cb6-16">    ax.yaxis.set_label_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb6-17">    ax.yaxis.set_offset_position(<span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;"># Offset the position of he ticks and labels</span></span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;"># by some % of the axes avoid overlapping of axes</span></span>
<span id="cb6-20">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_position((<span class="st" style="color: #20794D;">'outward'</span>, <span class="dv" style="color: #AD0000;">40</span> <span class="op" style="color: #5E5E5E;">*</span> ix))</span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;"># Plot the actual data</span></span>
<span id="cb6-22">    ax.plot(x, y, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-23">    <span class="co" style="color: #5E5E5E;"># Set the colors of the ticks, labels and spines to be</span></span>
<span id="cb6-24">    <span class="co" style="color: #5E5E5E;"># the same of the associated series</span></span>
<span id="cb6-25">    ax.spines[<span class="st" style="color: #20794D;">'left'</span>].set_color(<span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-26">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, colors<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'C</span><span class="sc" style="color: #5E5E5E;">{</span>ix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;"># Use a tick locator to have the same number of ticks</span></span>
<span id="cb6-28">    ax.yaxis.set_major_locator(mt.LinearLocator(<span class="dv" style="color: #AD0000;">11</span>))</span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;"># And format the labels to have only one digit after the decimals</span></span>
<span id="cb6-30">    ax.yaxis.set_major_formatter(mt.StrMethodFormatter(<span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{x:.1f}</span><span class="st" style="color: #20794D;">'</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/plots-with-multiple-y-axes/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<p>I find very useful for myself to provide a minimal example of having a plot with multiple axes, though a final plot may require more subtle adjustements. Keypoints to have multiple y axes:</p>
<ul>
<li>Use <code>twinx()</code> to create an additional axis</li>
<li>Set ticks, labels and offest positions to the right: <code>ax.yaxis.tick_left()</code>, <code>ax.yaxis.set_label_position('left')</code>, <code>ax.yaxis.set_offset_position('left')</code></li>
<li>Adjust the offset of the spines to the left using points, percentage or data coordinate. In the case of points: <code>ax.spines['left'].set_position()</code></li>
<li>Change spines, tick and label colors to the same of the series for better readability: <code>ax.spines['left'].set_color(color)</code>, <code>ax.tick_params(axis='y', colors=color)</code></li>
<li>Optionally adjust the number of ticks to be the same for all the axes: use a <code>LinearLocator</code> class with a fixed number of points</li>
</ul>


</section>

 ]]></description>
  <category>python</category>
  <category>matplotlib</category>
  <category>plot</category>
  <category>visualization</category>
  <guid>https://grigolet.github.io/posts/plots-with-multiple-y-axes/index.html</guid>
  <pubDate>Wed, 07 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://grigolet.github.io/posts/plots-with-multiple-y-axes/preview.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>A post made from a jupyter notebook</title>
  <dc:creator>Gianluca Rigoletti</dc:creator>
  <link>https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index.html</link>
  <description><![CDATA[ 




<p>Few days ago I found <a href="https://quarto.org">Quarto</a>. I understood it is an authoring framework based on pandoc and that has full support of jupyter notebooks as input files. Since lot of work I carry on at the moment makes a heavy use of jupyter notebook I decided to try Quarto and use it for two main purposes: the first is as a replacement of <code>jupyter nbconvert</code> that I have intensively used to convert notebooks to html pages.</p>
<p>I saw that Quarto provides much more flexibility on the layout of the text, images and code, which was exactly what I was looking for. The second way I intend to use Quarto is to publish the present content. At the time of writing, this post is written on an <code>index.ipynb</code> file in my local computer using Visual Studio code. I find extremely pleasant to write mixed content and have a tool that transforms it in a post page of a blog website.</p>
<p>I will showcase here all the features that I have personally found relevant for the posts I am going to write as well, hoping that this post serves as a quick reference (together with the <a href="https://quarto.org/docs/guide/">Quarto user guide</a>).</p>
<section id="code-cells" class="level2">
<h2 class="anchored" data-anchor-id="code-cells">Code cells</h2>
<p>Code cells are pretty straightforward: I just have to write code in a cell and it will be executed and the output eventually frozen by Quarto. I found the <a href="https://quarto.org/docs/projects/code-execution.html#freeze">freeze option</a> particularly useful and I set it to <code>auto</code> at the time of writing. In this way, the notebooks will be re-rendered only if the source code changes.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd </span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<p>At the very base you can just enter some code and save it. If you are using <code>quarto preview</code> the jupyter notebook is executed when it saved (and not when a code cell is executed, but this depends on the saving options of jupyter).</p>
<p>For instance, we can write some code and let it display some output like this:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> TestClass:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, params) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-3">        <span class="va" style="color: #111111;">self</span>.attributes <span class="op" style="color: #5E5E5E;">=</span> params</span>
<span id="cb2-4">    </span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;">def</span> increment(<span class="va" style="color: #111111;">self</span>, param: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;">return</span> param <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">obj <span class="op" style="color: #5E5E5E;">=</span> TestClass(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb2-9">obj.increment(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>11</code></pre>
</div>
</div>
<p>Sometimes a cell may contain lot of code that makes it difficult for the reader to keep track of the text. In this case folding the code is very helpful and only requires a special comment to be added at the beginning of the code cell:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">#| code-fold: true</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">class</span> TestClass:</span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, params) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-5">        <span class="va" style="color: #111111;">self</span>.attributes <span class="op" style="color: #5E5E5E;">=</span> params</span>
<span id="cb4-6">    </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;">def</span> increment(<span class="va" style="color: #111111;">self</span>, param: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;">return</span> param <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">obj <span class="op" style="color: #5E5E5E;">=</span> TestClass(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb4-11">obj.increment(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<p>Here below the result of the previous snippet of code:</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">class</span> TestClass:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, params) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-3">        <span class="va" style="color: #111111;">self</span>.attributes <span class="op" style="color: #5E5E5E;">=</span> params</span>
<span id="cb5-4">    </span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;">def</span> increment(<span class="va" style="color: #111111;">self</span>, param: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;">return</span> param <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-7"></span>
<span id="cb5-8">obj <span class="op" style="color: #5E5E5E;">=</span> TestClass(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb5-9">obj.increment(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>11</code></pre>
</div>
</div>
<p>Note that the output of the cell is not folded. This is particularly useful if you have lot of code printing out a plot for example: the code will be folded but the plot will be visible anyway.</p>
<p>Some other time I wish to completely hide the code while keeping the output visible. In this case the option <code>echo: false</code> does the job:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">#| echo: false</span></span>
<span id="cb7-2">plt.plot([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>], [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>], <span class="st" style="color: #20794D;">'ro'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p>Here below the result of the previous snippet of code:</p>
<div class="cell" data-execution_count="4">
<div class="cell-output cell-output-display">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Code cells can be also assigned a file name. This is particularly helpful when there is a post that needs to tackle code among several files. As an example you can have something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">#| filename: test.py</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">class</span> A:</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
<p>And this would be rendered to:</p>
<div class="cell" data-execution_count="5">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>test.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">class</span> A:</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
</div>
</div>
</section>
<section id="controlling-figures-layout" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="controlling-figures-layout">Controlling figures layout</h2>
<p>I find particularly useful the way Quarto helps treating outputs for code cells, especially laying out figures resulting from a code output. Often times I have big plots that I would like to take all the available horizontal space in the page. In this case I can use <code>#| column: page</code> together with on the code cell</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">#| column: page</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">#| fig-align: center</span></span>
<span id="cb10-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">5</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">150</span>)</span>
<span id="cb10-4">ax.plot(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>), [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">31</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell page-columns page-full" data-execution_count="7">
<div class="cell-output cell-output-display column-page">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>There is also support for custom layouts when multiple plots are produced. I typically use matplotlib APIs to lay out multiple plots but this features could be useful for images in general and sometimes with libraries where the layout support for subplots is not straightforward. As an example see this snippet:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">#| layout-ncol: 2</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb11-4">ax.plot([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>], [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>], <span class="st" style="color: #20794D;">'ro-'</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">fig2, ax2 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb11-7">ax2.plot([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>], [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">32</span>], <span class="st" style="color: #20794D;">'b*--'</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel" data-execution_count="23">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>There are several more features that I think I will be using throughout my journey on this blog. There are also some features related to publications that I want to explore as I would like to understand if I can have some publications ready LaTeX documents from jupyter notebooks</p>
<p>I found Quarto really easy to use and <a href="https://quarto.org/docs/guide/">the documentation</a> is fairly straightforward to follow. I hope to post more interesting findings and customization as I will use it :)</p>


</section>

 ]]></description>
  <category>jupyter</category>
  <category>notebook</category>
  <category>python</category>
  <category>quarto</category>
  <guid>https://grigolet.github.io/posts/a-post-with-jupyter-notebook/index.html</guid>
  <pubDate>Tue, 06 Sep 2022 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
